'NOTE: This is not implemented yet. It is scheduled for 2.0-beta3

Strict

#GLFW_WINDOW_TITLE="Vortex2 Picking Test"
#GLFW_WINDOW_WIDTH=800
#GLFW_WINDOW_HEIGHT=600
#GLFW_WINDOW_RESIZABLE=True
#GLFW_WINDOW_SAMPLES=2

Import mojo.app
Import mojo.input
Import vortex
Import vortex.src.math3d

Function LineSphereCollision:Bool(x1:Float, y1:Float, z1:Float, x2:Float, y2:Float, z2:Float, sx:Float, sy:Float, sz:Float, rad:Float)
	Return False
	'Local distV:Vec3 = Vec3.Create(sx, sy, sz)
	'Return distV.Length < rad
End

Class TestApp Extends App Final
Public
	Method OnCreate:Int()
		Local a#[] = New Float[5]
		
		'Setup
		SetUpdateRate(0)
		SetSwapInterval(0)
		Seed = Millisecs()
	
		'Init vortex
		If Not World.Init() Then EndApp()
		Print "Vendor name: " + Graphics.VendorName()
		Print "Renderer name: " + Graphics.RendererName()
		Print "API version name: " + Graphics.APIVersionName()
		Print "Shading version name: " + Graphics.ShadingVersionName()
		
		'Create points
		mP0 = [0.0, 0, -16]
		mP1 = [0.0, 0, 16]
		
		'Load font
		'mFont = Font.Load("system.fnt.dat")
		
		'Create camera
		mCam = New Camera()
		mCam.Position(16, 16, -16)
		mCam.Rotate(45, -45, 0)
		
		'Create sphere
		mSphere = New Model(Mesh.Load("sphere.msh.dat"))
		
		'Create line mesh
		Local lineSurf:Surface = New Surface(Surface.ModeLines)
		lineSurf.AddVertex(mP0[0], mP0[1], mP0[2], 0, 0, 0, Color.White, 0, 0)
		lineSurf.AddVertex(mP1[0], mP1[1], mP1[2], 0, 0, 0, Color.White, 0, 0)
		lineSurf.AddIndex(0)
		lineSurf.AddIndex(1)
		Local lineMesh:Mesh = New Mesh
		lineMesh.AddSurface(lineSurf)
		lineMesh.Material(0).Culling = False
		
		'Create line model
		mLine = New Model(lineMesh)
		
		Return False
	End
	
	Method OnUpdate:Int()	
		'End with escape key
		#If TARGET<>"html5"
		If KeyHit(KEY_ESCAPE) Then EndApp()
		#End
		
		'Update world
		World.Update()
		
		'Update camera view
		mCam.AspectRatio = Float(DeviceWidth()) / DeviceHeight()
		mCam.ViewportWidth = DeviceWidth()
		mCam.ViewportHeight = DeviceHeight()
		
		If LineSphereCollision(mP0[0], mP0[1], mP0[2], mP1[0], mP1[1], mP1[2], mSphere.WorldX, mSphere.WorldY, mSphere.WorldZ, 1)
			mSphere.Material.Color = Color.Red
		Else
			mSphere.Material.Color = Color.White
		End
		
		Return False
	End
	
	Method OnRender:Int()
		'Render world
		World.Render()
		
		#Rem
		'Setup renderer for 2D graphics
		Renderer.Setup2D(0, 0, DeviceWidth(), DeviceHeight())
		
		'Draw FPS
		Renderer.SetColor(Color.White)
		Local text:String = Stats.FPS() + " FPS"
		mFont.Draw(2, 2, text)
		
		'Draw render time
		text = "Render time: " + renderTime + " ms"
		mFont.Draw(2, 18, text)
		
		'Draw RenderCalls
		text = "Render calls: " + Stats.RenderCalls()
		mFont.Draw(2, 34, text)
		
		'Draw depth mode
		If World.SeparateDepthPass()
			text = "Separate depth pass"
		Else
			text = "No separate depth pass"
		End
		text += " (ENTER to switch)"
		mFont.Draw((DeviceWidth() - mFont.TextWidth(text))/2, DeviceHeight() - mFont.TextHeight(text) - 20, text)
		
		'Draw lighting mode
		If World.GlobalPixelLighting()
			text = "Pixel lighting"
		Else
			text = "Vertex lighting"
		End
		text += " (SPACE to switch)"
		mFont.Draw((DeviceWidth() - mFont.TextWidth(text))/2, DeviceHeight() - mFont.TextHeight(text) - 4, text)
		#End
	
		Return False
	End
Private
	Field mP0					: Float[3]
	Field mP1					: Float[3]
	'Field mFont				: Font
	Field mCam				: Camera
	Field mSphere			: Model
	Field mLine				: Model
End

Function Main:Int()
	New TestApp
	Return False
End
