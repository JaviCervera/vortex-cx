# Class Bone

A bone contains a list of transformations to be applied to the geometry attached to it when using animations.
Meshes can contains bones that animate the surfaces of the mesh (to make it walk, for example).

# Method New(name:String, parentIndex)
Creates a new bone with the specified name and parent index.

# Method Name:String() Property
Return the name of the bone.

# Method ParentIndex:Int() Property
Returns the parent index of the bone in the array of bones of the mesh that this bone belongs to, or -1 if it is the root bone in the mesh.

# Method TransformMatrix:Float[]() Property
Returns the transform matrix.
This matrix converts a vertex to its parent bone space.
You don't normally need to use this property.
It is used internally when rendering the geometry attached to the bone.

# Method InversePoseMatrix:Float[]() Property
Returns the inverse pose matrix.
This matrix converts a vertex from global space to its bone space.
You don't normally need to use this property.
It is used internally when rendering the geometry attached to the bone.

# Method NumSurfaces:Int() Property
Returns the number of surfaces attached to this bone.

# Method SurfaceIndex:Int(i:Int)
Returns the surface index of the specified surface within the mesh that this bone belongs to.

# Method AddPositionKey:Void(keyframe:Int, x:Float, y:Float, z:Float)
Adds a new position transformation to the bone at the specified keyframe.

# Method AddRotationKey:Void(keyframe:Int, w:Float, x:Float, y:Float, z:Float)
Adds a new rotation quaternion to the bone at the specified keyframe.

# Method AddScaleKey:Void(keyframe:Int, x:Float, y:Float, z:Float)
Adds a new scale transformation to the bone at the specified keyframe.

# Method NumPositionKeys:Int() Property
Returns the number of position keyframes in the bone.

# Method PositionKeyFrame:Int(index:Int)
Returns the frame number of the specified position keyframe. The value of `index` goes in the range `0 .. NumPositionKeys - 1`.

# Method PositionKeyX:Float(index:Int)
Returns the X coordinate of the specified position keyframe. The value of `index` goes in the range `0 .. NumPositionKeys - 1`.

# Method PositionKeyY:Float(index:Int)
Returns the Y coordinate of the specified position keyframe. The value of `index` goes in the range `0 .. NumPositionKeys - 1`.

# Method PositionKeyZ:Float(index:Int)
Returns the Z coordinate of the specified position keyframe. The value of `index` goes in the range `0 .. NumPositionKeys - 1`.

# Method NumRotationKeys:Int() Property
Returns the number of rotation keyframes in the bone.

# Method RotationKeyFrame:Int(index:Int)
Returns the frame number of the specified rotation keyframe. The value of `index` goes in the range `0 .. NumRotationKeys - 1`.

# Method RotationKeyW:Float(index:Int)
Returns the W quaternion coordinate of the specified rotation keyframe. The value of `index` goes in the range `0 .. NumRotationKeys - 1`.

# Method RotationKeyX:Float(index:Int)
Returns the X quaternion coordinate of the specified rotation keyframe. The value of `index` goes in the range `0 .. NumRotationKeys - 1`.

# Method RotationKeyY:Float(index:Int)
Returns the Y quaternion coordinate of the specified rotation keyframe. The value of `index` goes in the range `0 .. NumRotationKeys - 1`.

# Method RotationKeyZ:Float(index:Int)
Returns the Z quaternion coordinate of the specified rotation keyframe. The value of `index` goes in the range `0 .. NumRotationKeys - 1`.

# Method NumScaleKeys:Int() Property
Returns the number of scale keyframes in the bone.

# Method ScaleKeyFrame:Int(index:Int)
Returns the frame number of the specified scale keyframe. The value of `index` goes in the range `0 .. NumRotationKeys - 1`.

# Method ScaleKeyX:Float(index:Int)
Returns the X coordinate of the specified scale keyframe. The value of `index` goes in the range `0 .. NumRotationKeys - 1`.

# Method ScaleKeyY:Float(index:Int)
Returns the Y coordinate of the specified scale keyframe. The value of `index` goes in the range `0 .. NumRotationKeys - 1`.

# Method ScaleKeyZ:Float(index:Int)
Returns the Z coordinate of the specified scale keyframe. The value of `index` goes in the range `0 .. NumRotationKeys - 1`.




# Class Mesh

# Function Load(filename:String, skeletonFilename:String = "", texFilter:Int = Texture.FilterTrilinear, cache:Bool = True)
Loads and returns the mesh with the specified filename, or `Null` if the mesh could not be loaded.
You can also specify a skeleton file that will be loaded with the mesh (it is possible to load it afterwards with `Mesh.LoadSkeleton`).
If `cache` is `True` and you call this function several times with the same filename, the same object will be returned (this is, it won't load one mesh more than once).

# Method LoadSkeleton:Bool(filename:String)
Loads the skeleton data from the specified file and adds it to the mesh.
You should only use this method once on each mesh.

# Method LoadAnimation:Bool(filename:String, sequenceName:String = "")
Loads the animation data from the specified file and adds it to the mesh.
You can call this funcion several times to add different animation sequences.
You should not mix bone and vertex animation data within the same mesh.

# Method AddBone:Void(bone:Bone)
Adds a new bone to the mesh.

# Method NumBones:Int() Property
Gets the number of bones in the mesh.

# Method Bone:Bone(index:Int)
Gets the bone at the specified `index`, which is a value between `0` and `NumBones - 1`.

# Method LoadVertexAnimation:Bool(filename:String, sequenceName:String = "")
ADD THIS TO THE END:
You should not mix bone and vertex animation data within the same mesh.




# Class Surface

# Method VertexBone:Void(vertex:Int, index:Int, bone:Int, weight:Float)
Sets one of the bones that the vertex is attached to, and the weight that the bone has on the vertex (between 0 and 1).
A vertex can be attached to a maximum of four bones, specified in the `index` parameter with a value between 0 and 3.
Bone is the index within the mesh of the specified bone.

# Method VertexBoneIndex:Int(vertex:Int, index:Int)
Returns the specified vertex bone index.

# Method VertexBoneWeight:Float(vertex:Int, index:Int)
Return the specified vertex bone weight.