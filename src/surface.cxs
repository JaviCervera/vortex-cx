Strict

Private
Import brl.databuffer
Import color
Import math3d
Import renderer

Public
Class Surface
Public
	Const ModePoints					: Int = Renderer.ModePoints
	Const ModeLines					: Int = Renderer.ModeLines
	Const ModeTriangles			: Int = Renderer.ModeTriangles
	Const ModeTriangleStrip	: Int = Renderer.ModeTriangleStrip
	Const ModeTriangleFan		: Int = Renderer.ModeTriangleFan
	
	Method New(mode:Int = Surface.ModeTriangles)
		mMode = mode
		mIndices = New DataBuffer(Inc * 2, True)
		mVertices = New DataBuffer(Inc * VertexSize, True)
		mNumIndices = 0
		mNumVertices = 0
		mVertexBuffer = Renderer.CreateVertexBuffer(0)
		mIndexBuffer = Renderer.CreateIndexBuffer(0)
		mStatus = StatusOk
	End
	
	Method New(other:Surface)
		mIndices = New DataBuffer(Inc * 2, True)
		mVertices = New DataBuffer(Inc * VertexSize, True)
		mNumIndices = 0
		mNumVertices = 0
		mVertexBuffer = Renderer.CreateVertexBuffer(0)
		mIndexBuffer = Renderer.CreateIndexBuffer(0)
		Set(other)
	End

	Method Discard:Void()
		mIndices.Discard()
		mVertices.Discard()
		Renderer.FreeBuffer(mIndexBuffer)
		Renderer.FreeBuffer(mVertexBuffer)
	End
	
	Method Mode:Int() Property
		Return mMode
	End
	
	Method Set:Void(other:Surface)
		If Self = other Then Return
		mMode = other.mMode
		mStatus = StatusVerticesDrty | StatusIndicesDirty
		If mNumIndices <> other.mNumIndices Then mStatus |= StatusIndicesResized
		If mNumVertices <> other.mNumVertices Then mStatus |= StatusVerticesResized
		If mIndices.Length <> other.mIndices.Length
			mIndices.Discard()
			mIndices = New DataBuffer(other.mIndices.Length, True)
		End
		other.mIndices.CopyBytes(0, mIndices, 0, mIndices.Length)
		If mVertices.Length <> other.mVertices.Length
			mVertices.Discard()
			mVertices = New DataBuffer(other.mVertices.Length, True)
		End
		other.mVertices.CopyBytes(0, mVertices, 0, mVertices.Length)
		mNumIndices = other.mNumIndices
		mNumVertices = other.mNumVertices
		mVertexFrames = New VertexFrame[other.mVertexFrames.Length]
		For Local i:Int = 0 Until other.mVertexFrames.Length
			mVertexFrames[i] = New VertexFrame(other.mVertexFrames[i].mFrame, other.mVertexFrames[i].mPositions, other.mVertexFrames[i].mNormals)
		Next
		Rebuild()
	End
	
	Method AddIndex:Int(i:Int)
		'Create new buffer if current is too short
		If mIndices.Length() < (mNumIndices + 1) * 2
			'Copy old buffer into new one
			Local buf:DataBuffer = New DataBuffer(mIndices.Length() + Inc*2)
			mIndices.CopyBytes(0, buf, 0, mIndices.Length())
			mIndices.Discard()
			mIndices = buf
		End

		'Copy new index data
		mIndices.PokeShort(mNumIndices * 2, i)
		mNumIndices += 1
		
		'Update status
		mStatus |= StatusIndicesDirty | StatusIndicesResized
		
		Return NumIndices-1
	End
	
	Method NumIndices:Int() Property
		Return mNumIndices
	End
	
	Method Index:Void(num:Int, v:Int)
		mIndices.PokeShort(num*2, v)
		mStatus |= StatusIndicesDirty
	End
	
	Method Index:Int(num:Int)
		Return mIndices.PeekShort(num*2)
	End

	Method AddTriangle:Int(v0:Int, v1:Int, v2:Int)
		If mMode = ModeTriangles
			AddIndex(v0)
			AddIndex(v1)
			AddIndex(v2)
			Return NumTriangles-1
		Else
			Return -1
		End
	End

	Method NumTriangles:Int() Property
		Select mMode
		Case ModeTriangles
			Return NumIndices / 3
		Case ModeTriangleStrip, ModeTriangleFan
			Return Max(0, NumIndices - 2)
		Default
			Return 0
		End
	End

	Method Triangle:Void(tri:Int, v0:Int, v1:Int, v2:Int)
		If mMode = ModeTriangles
			mIndices.PokeShort(tri * 6, v0)
			mIndices.PokeShort(tri * 6 + 2, v1)
			mIndices.PokeShort(tri * 6 + 4, v2)
			mStatus |= StatusIndicesDirty
		End
	End

	Method TriangleV0:Int(tri:Int)
		If mMode = ModeTriangles Then Return mIndices.PeekShort(tri*6) Else Return -1
	End

	Method TriangleV1:Int(tri:Int)
		If mMode = ModeTriangles Then Return mIndices.PeekShort(tri*6 + 2) Else Return -1
	End

	Method TriangleV2:Int(tri:Int)
		If mMode = ModeTriangles Then Return mIndices.PeekShort(tri*6 + 4) Else Return -1
	End

	Method AddVertex:Int(x:Float, y:Float, z:Float, nx:Float, ny:Float, nz:Float, color:Int, u0:Float, v0:Float)
		'Create new buffer if current is too short
		If mVertices.Length() < (NumVertices + 1) * VertexSize
			'Copy old buffer into new one
			Local buf:DataBuffer = New DataBuffer(mVertices.Length() + Inc*VertexSize)
			mVertices.CopyBytes(0, buf, 0, mVertices.Length())
			mVertices.Discard()
			mVertices = buf
		End

		'Copy new vertex data
		mVertices.PokeFloat(mNumVertices * VertexSize, x)
		mVertices.PokeFloat(mNumVertices * VertexSize + 4, y)
		mVertices.PokeFloat(mNumVertices * VertexSize + 8, z)
		mVertices.PokeFloat(mNumVertices * VertexSize + 12, nx)
		mVertices.PokeFloat(mNumVertices * VertexSize + 16, ny)
		mVertices.PokeFloat(mNumVertices * VertexSize + 20, nz)
		'mVertices.PokeFloat(mNumVertices * VertexSize + 24, 1)
		'mVertices.PokeFloat(mNumVertices * VertexSize + 28, 0)
		'mVertices.PokeFloat(mNumVertices * VertexSize + 32, 0)
		mVertices.PokeFloat(mNumVertices * VertexSize + 36, Color.R(color) / 255.0)
		mVertices.PokeFloat(mNumVertices * VertexSize + 40, Color.G(color) / 255.0)
		mVertices.PokeFloat(mNumVertices * VertexSize + 44, Color.B(color) / 255.0)
		mVertices.PokeFloat(mNumVertices * VertexSize + 48, Color.A(color) / 255.0)
		mVertices.PokeFloat(mNumVertices * VertexSize + 52, u0)
		mVertices.PokeFloat(mNumVertices * VertexSize + 56, v0)
		mVertices.PokeFloat(mNumVertices * VertexSize + 60, u0)
		mVertices.PokeFloat(mNumVertices * VertexSize + 64, v0)
		mNumVertices += 1
		
		'Update status
		mStatus |= StatusVerticesDrty | StatusVerticesResized

		Return NumVertices-1
	End

	Method NumVertices:Int() Property
		Return mNumVertices
	End

	Method VertexPosition:Void(index:Int, x:Float, y:Float, z:Float)
		mVertices.PokeFloat(index * VertexSize + PosOffset, x)
		mVertices.PokeFloat(index * VertexSize + PosOffset + 4, y)
		mVertices.PokeFloat(index * VertexSize + PosOffset + 8, z)
		mStatus |= StatusVerticesDrty
	End

	Method VertexNormal:Void(index:Int, nx:Float, ny:Float, nz:Float)
		mVertices.PokeFloat(index * VertexSize + NormalOffset, nx)
		mVertices.PokeFloat(index * VertexSize + NormalOffset + 4, ny)
		mVertices.PokeFloat(index * VertexSize + NormalOffset + 8, nz)
		mStatus |= StatusVerticesDrty
	End
	
	Method VertexTangent:Void(index:Int, tx:Float, ty:Float, tz:Float)
		mVertices.PokeFloat(index * VertexSize + TangentOffset, tx)
		mVertices.PokeFloat(index * VertexSize + TangentOffset + 4, ty)
		mVertices.PokeFloat(index * VertexSize + TangentOffset + 8, tz)
		mStatus |= StatusVerticesDrty
	End

	Method VertexColor:Void(index:Int, color:Int)
		mVertices.PokeFloat(index * VertexSize + ColorOffset, Color.R(color) / 255.0)
		mVertices.PokeFloat(index * VertexSize + ColorOffset + 4, Color.G(color) / 255.0)
		mVertices.PokeFloat(index * VertexSize + ColorOffset + 8, Color.B(color) / 255.0)
		mVertices.PokeFloat(index * VertexSize + ColorOffset + 12, Color.A(color) / 255.0)
		mStatus |= StatusVerticesDrty
	End

	Method VertexTexCoords:Void(index:Int, u:Float, v:Float, set:Int = 0)
		If set = 0
			mVertices.PokeFloat(index * VertexSize + TexOffset, u)
			mVertices.PokeFloat(index * VertexSize + TexOffset + 4, v)
		Else
			mVertices.PokeFloat(index * VertexSize + TexOffset + 8, u)
			mVertices.PokeFloat(index * VertexSize + TexOffset + 12, v)

		End
		mStatus |= StatusVerticesDrty
	End
	
	Method VertexBone:Void(vertex:Int, index:Int, bone:Int, weight:Float)
		'WebGL does not support int attributes, so storing it as a float is a trick I am using
		mVertices.PokeFloat(vertex * VertexSize + BoneIndicesOffset + index * 4, bone)
		mVertices.PokeFloat(vertex * VertexSize + BoneWeightsOffset + index * 4, weight)
		mStatus |= StatusVerticesDrty
	End

	Method VertexX:Float(index:Int)
		Return mVertices.PeekFloat(index*VertexSize + PosOffset)
	End

	Method VertexY:Float(index:Int)
		Return mVertices.PeekFloat(index*VertexSize + PosOffset + 4)
	End

	Method VertexZ:Float(index:Int)
		Return mVertices.PeekFloat(index*VertexSize + PosOffset + 8)
	End

	Method VertexNX:Float(index:Int)
		Return mVertices.PeekFloat(index*VertexSize + NormalOffset)
	End

	Method VertexNY:Float(index:Int)
		Return mVertices.PeekFloat(index*VertexSize + NormalOffset + 4)
	End

	Method VertexNZ:Float(index:Int)
		Return mVertices.PeekFloat(index*VertexSize + NormalOffset + 8)
	End
	
	Method VertexTX:Float(index:Int)
		Return mVertices.PeekFloat(index*VertexSize + TangentOffset)
	End
	
	Method VertexTY:Float(index:Int)
		Return mVertices.PeekFloat(index*VertexSize + TangentOffset + 4)
	End
	
	Method VertexTZ:Float(index:Int)
		Return mVertices.PeekFloat(index*VertexSize + TangentOffset + 8)
	End
	
	Method VertexColor:Int(index:Int)
		Local r:Float = mVertices.PeekFloat(index*VertexSize + ColorOffset)
		Local g:Float = mVertices.PeekFloat(index*VertexSize + ColorOffset + 4)
		Local b:Float = mVertices.PeekFloat(index*VertexSize + ColorOffset + 8)
		Local a:Float = mVertices.PeekFloat(index*VertexSize + ColorOffset + 12)
		Return Color.RGB(r * 255, g * 255, b * 255, a * 255)
	End
	
	Method VertexCount:Int()
		Return mVertices.Length()
	End
	
	Method VertexU:Float(index:Int, set:Int = 0)
		If set = 0
			Return mVertices.PeekFloat(index*VertexSize + TexOffset)
		Else
			Return mVertices.PeekFloat(index*VertexSize + TexOffset + 8)
		End
	End

	Method VertexV:Float(index:Int, set:Int = 0)
		If set = 0
			Return mVertices.PeekFloat(index*VertexSize + TexOffset + 4)
		Else
			Return mVertices.PeekFloat(index*VertexSize + TexOffset + 12)
		End
	End
	
	Method VertexBoneIndex:Int(vertex:Int, index:Int)
		Return mVertices.PeekFloat(vertex * VertexSize + BoneIndicesOffset + index * 4)
	End
	
	Method VertexBoneWeight:Float(vertex:Int, index:Int)
		Return mVertices.PeekFloat(vertex * VertexSize + BoneWeightsOffset + index * 4)
	End
	
	Method Translate:Void(x:Float, y:Float, z:Float, rebuild:Bool = True)
		For Local i:Int = 0 Until NumVertices
			VertexPosition(i, VertexX(i) + x, VertexY(i) + y, VertexZ(i) + z)
		Next
		If rebuild Then Rebuild()
	End

	Method Rotate:Void(pitch:Float, yaw:Float, roll:Float, rebuild:Bool = True)
		QuatSetEuler(pitch, yaw, roll, mTempQuat)
		Local angle:Float = QuatDegrees(mTempQuat[0], mTempQuat[1], mTempQuat[2], mTempQuat[3])
		QuatAxis(mTempQuat[0], mTempQuat[1], mTempQuat[2], mTempQuat[3], mTempQuat)
		Mat4Identity(mTempMat)
		Mat4Rotate(mTempMat, angle, mTempQuat[0], mTempQuat[1], mTempQuat[2], mTempMat)
		For Local i:Int = 0 Until NumVertices
			Mat4MulVec4(mTempMat, VertexX(i), VertexY(i), VertexZ(i), 1, mTempQuat)
			VertexPosition(i, mTempQuat[0], mTempQuat[1], mTempQuat[2])
			Mat4MulVec4(mTempMat, VertexNX(i), VertexNY(i), VertexNZ(i), 0, mTempQuat)
			VertexNormal(i, mTempQuat[0], mTempQuat[1], mTempQuat[2])
		Next
		If rebuild Then Rebuild()
	End

	Method Scale:Void(x:Float, y:Float, z:Float, rebuild:Bool = True)
		For Local i:Int = 0 Until NumVertices
			VertexPosition(i, VertexX(i) * x, VertexY(i) * y, VertexZ(i) * z)
		Next
		If rebuild Then Rebuild()
	End

	Method Flip:Void(rebuild:Bool = True)
		For Local i:Int = 0 Until NumVertices
			VertexNormal(i, -VertexNX(i), -VertexNY(i), -VertexNZ(i))
		Next
		If mMode = ModeTriangles
			For Local i:Int = 0 Until NumTriangles
				Triangle(i, TriangleV2(i), TriangleV1(i), TriangleV0(i))
			Next
		End
		If rebuild Then Rebuild()
	End

	Method ColorVertices:Void(color:Int, rebuild:Bool = True)
		For Local i:Int = 0 Until NumVertices
			VertexColor(i, color)
		Next
		If rebuild Then Rebuild()
	End

	Method Rebuild:Void()
		If mStatus & StatusIndicesResized Then Renderer.ResizeIndexBuffer(mIndexBuffer, mNumIndices * 2)
		If mStatus & StatusIndicesDirty Then Renderer.SetIndexBufferData(mIndexBuffer, 0, mNumIndices * 2, mIndices)
		If mStatus & StatusVerticesResized Then Renderer.ResizeVertexBuffer(mVertexBuffer, mNumVertices * VertexSize)
		If mStatus & StatusVerticesDrty Then Renderer.SetVertexBufferData(mVertexBuffer, 0, mNumVertices * VertexSize, mVertices)
		mStatus = StatusOk
	End
	
	Method _AddVertexFrame:Void(frame:Int, positions:DataBuffer, normals:DataBuffer)
		mVertexFrames = mVertexFrames.Resize(mVertexFrames.Length + 1)
		mVertexFrames[mVertexFrames.Length - 1] = New VertexFrame(frame, positions, normals)
	End
	
	Method _AnimateVertices:Void(frame:Float, firstFrame:Int, lastFrame:Int)
		'Find interval indices
		Local firstIndex:Int = 0
		Local lastIndex:Int = mVertexFrames.Length-1
		For Local i:Int = 0 Until mVertexFrames.Length
			If mVertexFrames[i].Frame = firstFrame Then firstIndex = i
			If mVertexFrames[i].Frame = lastFrame Then lastIndex = i
		Next
		
		'Interpolate
		For Local i:Int = firstIndex To lastIndex
			Local prevIndex:Int = Max(firstIndex, i-1)
			If frame <= mVertexFrames[i].Frame
				Local t:Float = 0
				If i <> prevIndex Then t = (frame - mVertexFrames[prevIndex].Frame) / (mVertexFrames[i].Frame - mVertexFrames[prevIndex].Frame)
				For Local v:Int = 0 Until NumVertices
					Vec3Mix(
						mVertexFrames[prevIndex].X(v), mVertexFrames[prevIndex].Y(v), mVertexFrames[prevIndex].Z(v),
						mVertexFrames[i].X(v), mVertexFrames[i].Y(v), mVertexFrames[i].Z(v),
						t, mTempQuat)
					VertexPosition(v, mTempQuat[0], mTempQuat[1], mTempQuat[2])
					Vec3Mix(
						mVertexFrames[prevIndex].NX(v), mVertexFrames[prevIndex].NY(v), mVertexFrames[prevIndex].NZ(v),
						mVertexFrames[i].NX(v), mVertexFrames[i].NY(v), mVertexFrames[i].NZ(v),
						t, mTempQuat)
					VertexNormal(v, mTempQuat[0], mTempQuat[1], mTempQuat[2])
				Next
				Rebuild()
				Exit
			End
		Next
	End
	
	Method _Render:Void()
		Renderer.DrawBuffers(mVertexBuffer, mIndexBuffer, mNumIndices, PosOffset, NormalOffset, TangentOffset, ColorOffset, TexOffset, BoneIndicesOffset, BoneWeightsOffset, VertexSize, mMode)
	End
Private
	Const PosOffset:Int = 0			'12 bytes
	Const NormalOffset:Int = 12		'12 bytes
	Const TangentOffset:Int = 24		'12 bytes
	Const ColorOffset:Int = 36			'16 bytes
	Const TexOffset:Int = 52			'16 bytes
	Const BoneIndicesOffset:Int = 68	'16 bytes
	Const BoneWeightsOffset:Int = 84	'16 bytes
	Const VertexSize:Int = 100
	Const Inc:Int = 128
	
	Const StatusOk			: Int = 0
	Const StatusVerticesDrty	: Int = 1
	Const StatusVerticesResized	: Int = 2
	Const StatusIndicesDirty	: Int = 4
	Const StatusIndicesResized	: Int = 8

	Field mMode				: Int
	Field mIndices		: DataBuffer
	Field mVertices		: DataBuffer
	Field mNumIndices	: Int
	Field mNumVertices	: Int
	Field mIndexBuffer	: Int
	Field mVertexBuffer	: Int
	Field mVertexFrames	: VertexFrame[0]
	Field mStatus		: Int
	Global mTempQuat	: Float[4]	'Used for math operations
	Global mTempMat	: Float[16]
End

Private

Class VertexFrame	
	Method New(frame:Int, positions:DataBuffer, normals:DataBuffer)
		mFrame = frame
		mPositions = New DataBuffer(positions.Length)
		mNormals = New DataBuffer(normals.Length)
		positions.CopyBytes(0, mPositions, 0, positions.Length)
		normals.CopyBytes(0, mNormals, 0, normals.Length)
	End
	
	Method Frame:Int() Property
		Return mFrame
	End
	
	Method X:Float(index:Int)
		Return mPositions.PeekFloat(index*12)
	End
	
	Method Y:Float(index:Int)
		Return mPositions.PeekFloat(index*12 + 4)
	End
	
	Method Z:Float(index:Int)
		Return mPositions.PeekFloat(index*12 + 8)
	End
	
	Method NX:Float(index:Int)
		Return mNormals.PeekFloat(index*12)
	End
	
	Method NY:Float(index:Int)
		Return mNormals.PeekFloat(index*12 + 4)
	End
	
	Method NZ:Float(index:Int)
		Return mNormals.PeekFloat(index*12 + 8)
	End
Private
	Field	mFrame:Int
	Field	mPositions:DataBuffer
	Field mNormals:DataBuffer
	
	Method New()
	End
End
