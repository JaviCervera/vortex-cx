Strict

Private
Import brl.databuffer
Import brl.datastream
Import brl.filepath
Import cache
Import mojo.app
Import renderer
Import texture

Public

Class Glyph
	Field mX		: Float
	Field mY		: Float
	Field mWidth	: Float
	Field mHeight	: Float
	Field mXOffset	: Float
	Field mYOffset	: Float
End

Class Font
Public
	Method New(filename:String, height:Float, tex:Texture)
		mFilename = filename
		mHeight = height
		mTexture = tex
		For Local i:Int = 0 Until mGlyphs.Length
			mGlyphs[i] = New Glyph
		Next
	End
	
	Function Load:Font(filename:String, cache:Bool = True)
		If cache
			Return Cache._LoadFont(filename)
		Else
			Return _Load(filename)
		End
	End
	
	Function IsLoaded:Bool(filename:String)
		Return Cache._LoadedFont(filename) <> Null
	End

	Method Discard:Void()
		mTexture.Discard()
	End
	
	Method Filename:Void(filename:String) Property
		mFilename = filename
	End

	Method Filename:String() Property
		Return mFilename
	End

	Method Height:Float() Property
		Return mHeight
	End
	
	Method Texture:Texture() Property
		Return mTexture
	End

	Method TextWidth:Float(text:String)
		Local width:Float = 0
		For Local i:Int = 0 Until text.Length()
			'If String.FromChar(text[i]) = " " Then
			'	width += mMaxWidth
			'Else
				width += mGlyphs[text[i]-32].mWidth
			'End
		Next
		Return width
	End

	Method TextHeight:Float(text:String)
		#Rem
		Local height:Float = 0
		For Local i:Int = 0 Until text.Length()
			Local charHeight:Float = mGlyphs[text[i]-32].mHeight + mGlyphs[text[i]-32].mYOffset
			If charHeight > height Then height = charHeight
		Next
		Return height
		#End
		Return mMaxHeight
	End

	Method Draw:Void(x:Float, y:Float, text:String)
		y += mMaxHeight
		For Local i:Int = 0 Until text.Length()
			Local glyph:Glyph = mGlyphs[text[i]-32]
			If text[i]-32 <> 0 And glyph.mWidth <> 0 And glyph.mHeight <> 0
				'mTexture.Draw(x + glyph.mXOffset, y + (mMaxHeight - glyph.mHeight) + glyph.mYOffset, 0, 0, glyph.mX, glyph.mY, glyph.mWidth, glyph.mHeight)
				mTexture.Draw(x + glyph.mXOffset, y + glyph.mYOffset, 0, 0, glyph.mX, glyph.mY, glyph.mWidth, glyph.mHeight)
			End
			x += glyph.mWidth
		Next
	End
	
	Method _NumGlyphs:Int() Property
		Return mGlyphs.Length
	End
	
	Method _GlyphData:Void(index:Int, x:Float, y:Float, w:Float, h:Float, xoffset:Float, yoffset:Float)
		mGlyphs[index].mX = x
		mGlyphs[index].mY = y
		mGlyphs[index].mWidth = w
		mGlyphs[index].mHeight = h
		mGlyphs[index].mXOffset = xoffset
		mGlyphs[index].mYOffset = yoffset
		If index = 33 And mGlyphs[0].mWidth = 0 Then mGlyphs[0].mWidth = w/2	'If SPACE has no width, assign half the width of A
		mMaxHeight = Max(mMaxHeight, h)
	End
	
	Method _GlyphData:Glyph(index:Int)
		Return mGlyphs[index]
	End
	
	Function _Load:Font(filename:String)
		'Fix filename
		Local fixedFilename:String = filename
		If fixedFilename.Length > 2 And String.FromChar(fixedFilename[0]) <> "/" And String.FromChar(fixedFilename[1]) <> ":" Then fixedFilename = "cerberus://data/" + fixedFilename
		
		'Load font data
		Local data:DataBuffer = DataBuffer.Load(fixedFilename)
		If Not data Then Return Null
		Local font:Font = Font._LoadData(data, filename)
		data.Discard()
	
		Return font
	End
	
	Function _LoadData:Font(data:DataBuffer, filename:String)
		Local stream:DataStream = New DataStream(data)
		Local fontPath:String = ExtractDir(filename)
		If fontPath <> "" Then fontPath += "/"
		
		'Id
		Local id:String = stream.ReadString(4)
		If id <> "FN01" Then Return Null
		
		'Texture name
		Local texLen:Int = stream.ReadInt()
		Local texName:String = stream.ReadString(texLen)
		If texName <> "" Then texName = fontPath + texName
		
		'Font height
		Local height:Int = stream.ReadShort() & $FFFF
		
		'Num glyphs
		Local numGlyphs:Int = stream.ReadInt()
		
		'First char
		Local firstChar:Int = stream.ReadInt()
		
		'Load texture
		Local tex:Texture = texture.Texture.Load(texName, texture.Texture.FilterNone, False)
		If Not tex Then Return Null
		
		'Create font
		Local font:Font = New Font(filename, height, tex)
		
		'Add glyphs
		For Local i:Int = 0 Until numGlyphs
			'Get glyph data
			Local x:Float = stream.ReadFloat()
			Local y:Float = stream.ReadFloat()
			Local width:Float = stream.ReadFloat()
			Local height:Float = stream.ReadFloat()
			Local xoffset:Float = stream.ReadFloat()
			Local yoffset:Float = stream.ReadFloat()
			
			'Add glyph data
			font._GlyphData(i, x, y, width, height, xoffset, yoffset)
		Next
		
		stream.Close()
		
		Return font
	End
Private
	Method New()
	End

	Field mFilename		: String
	Field mHeight		: Float
	Field mTexture		: Texture
	Field mGlyphs		: Glyph[224]
	Field mMaxHeight	: Float	'Height of the tallest char in this font
End
