Strict

Private
Import color
Import framebuffer
Import listener
Import math3d
Import mojo.app
Import renderer
Import renderstate
Import world
Import collision

Public
Import entity

Class Camera Extends Entity
	Const ClearNone	: Int = 0
	Const ClearColor	: Int = 1
	Const ClearSkybox	: Int = 2
	
    '--------------------------------------------------------

Private

	Field rtProjectionTransform:Float[16]
	Field rtViewTransform:Float[16]
	Field rtTempPoint:Float[3]
	Field mProjectedPoint:Int[2]

Public

	Method ProjectedX:Int() Property
	    Return mProjectedPoint[0]
	End
	
	Method ProjectedY:Int() Property
	    Return mProjectedPoint[1]
	End
	
	Method Project:Void( inputPoint:Float[] )
	    Mat4PerspectiveLH( FovY, AspectRatio, Near, Far, rtProjectionTransform )
	    Mat4ViewEuler( WorldX, WorldY, WorldZ, Pitch, Yaw, Roll, rtViewTransform )
	    Vec3TransformCoord( rtTempPoint, inputPoint, rtViewTransform )
	    Vec3TransformCoord( rtTempPoint, rtTempPoint, rtProjectionTransform )
	    mProjectedPoint[0] = ( rtTempPoint[0] + 1.0 ) * ( ViewportWidth  / 2 )
	    mProjectedPoint[1] = ( 1.0 - rtTempPoint[1] ) * ( ViewportHeight / 2 )
	End
    
    '--------------------------------------------------------
    
	Method New(parent:Entity = Null)
		Super.New(parent)
		Viewport(0, 0, -1, -1)
		mClearMode = ClearColor
		mBackgroundColor = Color.RGB(55, 155, 255)
		FovY = 50
		AspectRatio = -1
		Near = 1
		Far = 1000
		Visible = True
		If Listener.Instance() = Null Then Listener.Instance(Self)
	End
	
	Method Discard:Void()
		Super.Discard()
		If Listener.Instance() = Self Then Listener.Instance(Null)
	End
	
	Method CollisionMode:Void(mode:Int) Property
		If mode <> Super.CollisionMode
			Super.CollisionMode(mode)
			If mode <> CollisionNone Then Active = True
		End
	End
	
	Method Visible:Void(visible:Bool) Property
		If visible <> Super.Visible
			Super.Visible(visible)
			If visible
				World._AddCamera(Self)
			Else
				World._FreeCamera(Self)
			End
		End
	End
	
	Method ViewportX:Int() Property
		Return mVX
	End
	
	Method ViewportY:Int() Property
		Return mVY
	End
	
	Method ViewportWidth:Int() Property
		If mVW <> -1
			Return mVW
		Else
			Return DeviceWidth()
		End
	End
	
	Method ViewportHeight:Int() Property
		If mVH <> -1
			Return mVH
		Else
			Return DeviceHeight()
		End
	End
	
	Method ViewportX:Void(val:Int) Property
		mVX = val
	End
	
	Method ViewportY:Void(val:Int) Property
		mVY = val
	End
	
	Method ViewportWidth:Void(val:Int) Property
		mVW = val
	End
	
	Method ViewportHeight:Void(val:Int) Property
		mVH = val
	End
	
	Method Viewport:Void(x:Int, y:Int, width:Int, height:Int)
		mVX = x
		mVY = y
		mVW = width
		mVH = height
	End
	
	Method ClearMode:Int() Property
		Return mClearMode
	End
	
	Method ClearMode:Void(mode:Int) Property
		mClearMode = Clamp(mode, ClearNone, ClearSkybox)
	End
	
	Method BackgroundColor:Int() Property
		Return mBackgroundColor
	End
	
	Method BackgroundColor:Void(color:Int) Property
		mBackgroundColor = color
	End
	
	Method Orthographic:Bool() Property
		Return mOrtho
	End
	
	Method Orthographic:Void(ortho:Bool) Property
		mOrtho = ortho
	End
	
	Method FovY:Float() Property
		Return mFovY
	End
	
	Method FovY:Void(fovy:Float) Property
		mFovY = fovy
	End
	
	Method AspectRatio:Float() Property
		If mRatio <> -1
			Return mRatio
		Else
			Return Float(ViewportWidth) / ViewportHeight
		End
	End
	
	Method AspectRatio:Void(ratio:Float) Property
		mRatio = ratio
	End
	
	Method Near:Float() Property
		Return mNear
	End
	
	Method Near:Void(near:Float) Property
		mNear = near
	End
	
	Method Far:Float() Property
		Return mFar
	End
	
	Method Far:Void(far:Float) Property
		mFar = far
	End
	
	Method Framebuffer:Framebuffer() Property
		Return mFramebuffer
	End
	
	Method Framebuffer:Void(fb:Framebuffer) Property
		mFramebuffer = fb
	End
	
	Function Current:Camera()
		Return mCurrent
	End
	
	Method _PrepareForRender:Void()
		mCurrent = Self
	
		'Set framebuffer
		If mFramebuffer
			mFramebuffer.Use()
		Else
			Framebuffer.UseScreen()
		End

		'Set viewport
		Renderer.Setup3D(mVX, mVY, ViewportWidth, ViewportHeight)
		
		'Set projection matrix
		If mOrtho
			Local height:Float = mFovY * 0.5
			Local width:Float = height * AspectRatio
			Mat4OrthoLH(-width, width, -height, height, mNear, mFar, RenderState.ProjectionMatrix)
		Else
			Mat4PerspectiveLH(mFovY, AspectRatio, mNear, mFar, RenderState.ProjectionMatrix)
		End
		
		'Set view matrix
		Mat4ViewEuler(WorldX, WorldY, WorldZ, Pitch, Yaw, Roll, RenderState.ViewMatrix)
		
		'Clear buffers
		Renderer.ClearDepthBuffer()
		Select mClearMode
		Case ClearColor
			Renderer.ClearColorBuffer(BackgroundColor)
		Case ClearSkybox
			World._RenderSkybox(WorldX, WorldY, WorldZ)
		End
	End
	

	
Private
	Global mCurrent				: Camera
	Field mVX					: Int
	Field mVY					: Int
	Field mVW					: Int
	Field mVH					: Int
	Field mClearMode	: Int
	Field mBackgroundColor	: Int
	Field mOrtho			: Bool
	Field mFovY				: Float
	Field mRatio			: Float
	Field mNear				: Float
	Field mFar				: Float
	Field mFramebuffer	: Framebuffer
End
