Strict

Private

Import cache
Import camera
Import collision
Import color
Import entity
Import framebuffer
Import graphics
Import light
Import listener
Import material
Import math3d
Import mesh
Import mojo.app
Import renderer
Import renderstate
Import shader
Import surface
Import texture

Public
Class World
    '---------------------------------------------------------

Private

	Global rtTraceInfo:TraceInfo = New TraceInfo
	Global rtProjectionTransform:Float[16]
	Global rtViewTransform:Float[16]
	Global rtInverseViewTransform:Float[16]
	Global rtNormPoint:Float[3]
	Global rtLineDirection:Float[3]
	Global mPickedEntity:Entity
	Global mPickedSurface:Surface
	Global mPickedTriangle:Int
	Global mPickedDistance:Float
	Global mPickedPoint:Float[3]
	Global mPickedNormal:Float[3]
	
	Public
	
	Function PickedEntity:Entity()
	    Return mPickedEntity
	End
	
	Function PickedSurface:Surface()
	    Return mPickedSurface
	End
	
	Function PickedTriangle:Int()
	    Return mPickedTriangle
	End
	
	Function PickedDistance:Float()
	    Return mPickedDistance
	End
	
	Function PickedX:Float()
	    Return mPickedPoint[0]
	End
	
	Function PickedY:Float()
	    Return mPickedPoint[1]
	End
	
	Function PickedZ:Float()
	    Return mPickedPoint[2]
	End
	
	Function PickedNX:Float()
	    Return mPickedNormal[0]
	End
	
	Function PickedNY:Float()
	    Return mPickedNormal[1]
	End
	
	Function PickedNZ:Float()
	    Return mPickedNormal[2]
	End
	
	Function RayTrace:Bool( rayOrigin:Float[], rayDirection:Float[], maxDistance:Float = 0.0 )
	    mPickedEntity   = Null
	    mPickedSurface  = Null
	    mPickedTriangle = -1
	    mPickedDistance = 10000000000.0
	    Local minDistance:Float = 10000000000.0
	    For Local targetEntity:Entity = EachIn mEntities
	        If Not ( targetEntity.Visible And targetEntity.Pickable ) Then Continue
	        If Not targetEntity.RayTrace( rtTraceInfo, rayOrigin, rayDirection, maxDistance ) Then Continue
	        If rtTraceInfo.mDistance >= minDistance Then Continue
	        minDistance = rtTraceInfo.mDistance
	        mPickedEntity    = targetEntity
	        mPickedSurface   = rtTraceInfo.mSurface
	        mPickedTriangle  = rtTraceInfo.mTriangle
	        mPickedDistance  = rtTraceInfo.mDistance
	        mPickedPoint[0]  = rtTraceInfo.mPoint[0]
	        mPickedPoint[1]  = rtTraceInfo.mPoint[1]
	        mPickedPoint[2]  = rtTraceInfo.mPoint[2]
	        mPickedNormal[0] = rtTraceInfo.mNormal[0]
	        mPickedNormal[1] = rtTraceInfo.mNormal[1]
	        mPickedNormal[2] = rtTraceInfo.mNormal[2]
	    End
	    Return mPickedEntity <> Null
	End
	
	Function CameraPick:Bool( cameraEntity:Camera, screenX:Int, screenY:Int )
	    Mat4PerspectiveLH( cameraEntity.FovY, cameraEntity.AspectRatio, cameraEntity.Near, cameraEntity.Far, rtProjectionTransform )
	    rtNormPoint[0] = ( screenX * 2.0 / cameraEntity.ViewportWidth - 1.0  ) / rtProjectionTransform[0]
	    rtNormPoint[1] = ( 1.0 - screenY * 2.0 / cameraEntity.ViewportHeight ) / rtProjectionTransform[5]
	    rtNormPoint[2] = 1.0
	    Mat4ViewEuler( cameraEntity.WorldX, cameraEntity.WorldY, cameraEntity.WorldZ, cameraEntity.Pitch, cameraEntity.Yaw, cameraEntity.Roll, rtViewTransform )
	    Mat4Invert( rtViewTransform, rtInverseViewTransform )
	    Local rayOrigin:Float[3]
	    rayOrigin[0] = rtInverseViewTransform[12]
	    rayOrigin[1] = rtInverseViewTransform[13]
	    rayOrigin[2] = rtInverseViewTransform[14]
	    Local rayDirection:Float[3]
	    Vec3TransformNormal( rayDirection, rtNormPoint, rtInverseViewTransform )
	    Return RayTrace( rayOrigin, rayDirection )
	End
	
	Function LinePick:Bool( lineStart:Float[], lineEnd:Float[] )
	    Vec3Sub( rtLineDirection, lineEnd, lineStart )
	    Local lineLength:Float = Vec3Normalize( rtLineDirection, rtLineDirection )
	    Return RayTrace( lineStart, rtLineDirection, lineLength )
	End
	    
    '---------------------------------------------------------
	Function Init:Bool(numLights:Int = 4)
		If numLights <= 0 Then numLights = 1
		If Renderer.Init(numLights, 75)
			Cache._Push()
			mSkybox = Mesh.CreateSkybox()
			mSkybox.Material(0).Shader = Shader._Skybox()
			mSkybox.Material(0).DepthWrite = False
			SunRotation(45, -45)
			SunColor(Color.White)
			Ambient(Color.RGB(75, 75, 75))
			FogEnabled(False)
			FogMinDistance(600)
			FogMaxDistance(1000)
			FogColor(Color.Black)
			SeparateDepthPass(False)
			Shadows(False)
			mLastMillisecs = Millisecs()
			Return True
		Else
			mLastMillisecs = Millisecs()
			Return False
		End
	End
	
	Function Update:Void()
		mDeltaTime = (Millisecs() - mLastMillisecs) / 1000.0
		mLastMillisecs = Millisecs()
		For Local e:Entity = Eachin mEnabledEntities
			e._Update()
		Next
		Listener._Update()
	End
	
	Function Render:Void()
		'Update screen fps
		Graphics._UpdateFPS()
		Local numRenderCalls:Int = 0
		
		'Is there sun light?
		Local sunLightEnabled:Bool = False
		If mSunColor <> Color.Black Then sunLightEnabled = True
		
		'Get number of lights
		Local numLights:Int = Min(mLights.Count() + sunLightEnabled, Renderer.MaxLights())

		'Render all cameras
		For Local c:Camera = Eachin mCameras
			'If shadows are enabled and supported, setup shadows
			If mShadowsEnabled And Shader._Shadow().Handle <> 0
				'Find the point the camera is looking at
				QuatSetEuler(c.Pitch, c.Yaw, c.Roll, mTempArr)
				QuatMulVec3(mTempArr[0], mTempArr[1], mTempArr[2], mTempArr[3], 0, 0, mShadowsRange/2, mTempArr)
				Vec3Add(c.WorldX, c.WorldY, c.WorldZ, mTempArr[0], mTempArr[1], mTempArr[2], mTempArr)
				Local lookx:Float = mTempArr[0]
				Local looky:Float = mTempArr[1]
				Local lookz:Float = mTempArr[2]
				
				'Move from that point to the light source
				QuatSetEuler(mSunPitch, mSunYaw, 0, mTempArr)
				QuatMulVec3(mTempArr[0], mTempArr[1], mTempArr[2], mTempArr[3], 0, 0, -mShadowsSunDist, mTempArr)
				Vec3Add(mTempArr[0], mTempArr[1], mTempArr[2], lookx, looky, lookz, mTempArr)
				
				'Setup depth matrices
				Mat4OrthoHeightLH(mShadowsRange, 1, 0, mShadowsSunDist*2, mDepthProj)
				Mat4LookAtLH(mTempArr[0], mTempArr[1], mTempArr[2], lookx, looky, lookz, 0, 1, 0, mDepthView)
			
				'Set framebuffer
				mFramebuffer.Use()
				
				'Setup renderer
				Renderer.Setup3D(0, 0, mFramebuffer.ColorTexture.Width, mFramebuffer.ColorTexture.Height)
				Shader._CurrentDefault(Shader._Shadow())
				Mat4Copy(mDepthProj, RenderState.ProjectionMatrix)
				Mat4Copy(mDepthView, RenderState.ViewMatrix)
				Renderer.ClearColorBuffer(Color.White)
				Renderer.ClearDepthBuffer()
				
				'Render entities for shadow step
				For Local e:Entity = Eachin mVisibleEntities
					numRenderCalls += e._Render(Material.StepShadows)
				Next
				
				'Set screen
				Framebuffer.UseScreen()
			End
			
			'Prepare camera
			c._PrepareForRender()
			
			'Previous depth pass
			RenderState.SeparateDepthPass = mSeparateDepthPass
			If mSeparateDepthPass
				Shader._CurrentDefault(Shader._Shadow())
				Renderer.SetDepthWrite(True)
				
				'Render entities to capture depth
				For Local e:Entity = Eachin mVisibleEntities
					numRenderCalls += e._Render(Material.StepSolid)
				Next
				
				Shader._CurrentDefault(Shader._Default3D())
			End
			
			'Set fog and number of lights
			RenderState.FogEnabled = mFogEnabled
			RenderState.FogColor = mFogColor
			RenderState.FogMinDistance = mFogMin
			RenderState.FogMaxDistance = mFogMax
			RenderState.NumLights = numLights
			
			'Set depth data and shadow state
			If mShadowsEnabled And Shader._Shadow().Handle <> 0
				Mat4Identity(RenderState.DepthBiasMatrix)
				RenderState.DepthBiasMatrix[0] = 0.5
				RenderState.DepthBiasMatrix[5] = 0.5
				RenderState.DepthBiasMatrix[10] = 0.5
				RenderState.DepthBiasMatrix[12] = 0.5
				RenderState.DepthBiasMatrix[13] = 0.5
				RenderState.DepthBiasMatrix[14] = 0.5
				Mat4Mul(RenderState.DepthBiasMatrix, mDepthProj, RenderState.DepthBiasMatrix)
				Mat4Mul(RenderState.DepthBiasMatrix, mDepthView, RenderState.DepthBiasMatrix)
				RenderState.ShadowsEnabled = True
				RenderState.DepthEpsilon = mShadowsRange / 10000.0
				Renderer.SetDepthTexture(DepthTexture().Handle)
			Else
				RenderState.ShadowsEnabled = False
			End
			
			'Prepare lighting
			If numLights > 0 Then RenderState.Ambient = mAmbient
			If sunLightEnabled
				QuatSetEuler(mSunPitch, mSunYaw, 0, mTempArr)
				QuatMulVec3(mTempArr[0], mTempArr[1], mTempArr[2], mTempArr[3], 0, 0, -1, mTempArr)
				Mat4MulVec4(RenderState.ViewMatrix, mTempArr[0], mTempArr[1], mTempArr[2], 0, RenderState.LightPos[0])
				RenderState.LightColor[0] = mSunColor
			End
			If numLights > sunLightEnabled
				Local i:Int = sunLightEnabled
				For Local l:Light = Eachin mLights
					If i >= numLights Then Exit
					l._PrepareForRender(i)
					i += 1
				Next
			End
			
			'Render all steps
			If mSeparateDepthPass Then Renderer.SetDepthWrite(False)
			For Local step_:Int = Material.StepSolid Until Material.StepCount
				For Local e:Entity = Eachin mVisibleEntities
					numRenderCalls += e._Render(step_)
				Next
			End
			
			'Set num render calls
			Graphics._SetRenderCalls(numRenderCalls)
		End
		
		'Restore screen rendering
		Framebuffer.UseScreen()
	End
	
	Function DeltaTime:Float()
		Return mDeltaTime
	End

	Function SkyboxTexture:Texture()
		Return mSkybox.Material(0).CubeTexture
	End
	
	Function SkyboxTexture:Void(tex:Texture)
		'mSkybox.Material(0).DiscardTextures()
		mSkybox.Material(0).CubeTexture = tex
	End
	
	Function NumEntities:Int()
		Return mEntities.Count()
	End
	
	Function Entity:Entity(index:Int)
		Local i:Int = 0
		Local node:list.Node<Entity> = mEntities.FirstNode()
		While node And i < index
			node = node.NextNode()
			i += 1
		Wend
		If node And i = index Then Return node.Value() Else Return Null
	End
	
	Function FindEntity:Entity(name:String)
		For Local e:Entity = Eachin mEntities
			If e.Name = name Then Return e
		Next
		Return Null
	End
	
	Function SunPitch:Float()
		Return mSunPitch
	End
	
	Function SunYaw:Float()
		Return mSunYaw
	End
	
	Function SunRotation:Void(pitch:Float, yaw:Float)
		mSunPitch = pitch
		mSunYaw = yaw
	End
	
	Function SunColor:Int()
		Return mSunColor
	End
	
	Function SunColor:Void(color:Int)
		mSunColor = color
	End
	
	Function Ambient:Int()
		Return mAmbient
	End
	
	Function Ambient:Void(amb:Int)
		mAmbient = amb
	End
	
	Function FogEnabled:Bool()
		Return mFogEnabled
	End
	
	Function FogEnabled:Void(enabled:Bool)
		mFogEnabled = enabled
	End
	
	Function FogMinDistance:Float()
		Return mFogMin
	End
	
	Function FogMinDistance:Void(minDist:Float)
		mFogMin = minDist
	End
	
	Function FogMaxDistance:Float()
		Return mFogMax
	End
	
	Function FogMaxDistance:Void(maxDist:Float)
		mFogMax = maxDist
	End
	
	Function FogColor:Int()
		Return mFogColor
	End
	
	Function FogColor:Void(color:Int)
		mFogColor = color
	End
	
	Function SeparateDepthPass:Bool()
		Return mSeparateDepthPass
	End
	
	Function SeparateDepthPass:Void(enable:Bool)
		mSeparateDepthPass = enable
	End
	
	Function Shadows:Bool()
		Return mShadowsEnabled
	End
	
	Function Shadows:Void(enable:Bool, range:Float = 500, sunDistance:Float = 0, shadowTexSize:Int = 1024)
		mShadowsEnabled = enable
		If mFramebuffer Then mFramebuffer.Discard()
		If enable
			If sunDistance = 0 Then sunDistance = range * 0.5
			If shadowTexSize <= 0 Then shadowTexSize = 1024
			mShadowsRange = range
			mShadowsSunDist = sunDistance
			shadowTexSize = Min(shadowTexSize, Graphics.MaxTextureSize())
			mFramebuffer = New Framebuffer(shadowTexSize, shadowTexSize, True)
		End
	End
	
	Function DepthTexture:Texture()
		If mFramebuffer Then Return mFramebuffer.ColorTexture Else Return Null
	End
	
	Function AddStaticCollisionBox:Void(x:Float, y:Float, z:Float, width:Float, height:Float, depth:Float)
		mColBoxes = mColBoxes.Resize(mColBoxes.Length + 1)
		mColBoxes[mColBoxes.Length - 1] = New Box(x, y, z, x+width, y+height, z+depth)
	End
	
	Function ClearStaticCollisions:Void()
		mColBoxes = New Box[0]
	End
	
	Function _CheckStaticCollision:Bool(x:Float, y:Float, z:Float, sqRadius:Float)
		'Iterate through all collision boxes
		For Local box:Box = Eachin mColBoxes
			If Collision.BoxSphere(box.Min[0], box.Min[1], box.Min[2], box.Max[0], box.Max[1], box.Max[2], x, y, z, sqRadius)
				Return True
			End
		Next
		
		Return False
	End
	
	Function _AddEntity:Void(e:Entity)
		mEntities.AddLast(e)
	End
	
	Function _FreeEntity:Void(e:Entity)
		_EntityNeedsUpdate(e, False)
		'_EntityNeedsPrepareRender(e, False)
		_EntitySetVisible(e, False)
		mEntities.RemoveFirst(e)
	End
	
	Function _AddCamera:Void(c:Camera)
		mCameras.AddLast(c)
	End
	
	Function _FreeCamera:Void(c:Camera)
		mCameras.RemoveFirst(c)
	End
	
	Function _AddLight:Void(l:Light)
		mLights.AddLast(l)
	End
	
	Function _FreeLight:Void(l:Light)
		mLights.RemoveFirst(l)
	End
	
	Function _EntityNeedsUpdate:Void(e:Entity, update:Bool)
		If update
			If Not mEnabledEntities.Contains(e) Then mEnabledEntities.AddLast(e)
		Else
			mEnabledEntities.RemoveFirst(e)
		End
	End
	
	Function _EntitySetVisible:Void(e:Entity, visible:Bool)
		If visible
			If Not mVisibleEntities.Contains(e) Then mVisibleEntities.AddLast(e)
		Else
			mVisibleEntities.RemoveFirst(e)
		End
	End
	
	Function _RenderSkybox:Void(x:Float, y:Float, z:Float)
		Mat4TransformEuler(x, y, z, 0, 0, 0, 10, 10, 10, RenderState.ModelMatrix)
		mSkybox.Material(0)._PrepareForRender(Material.StepNoDepthWrite)
		mSkybox.Surface(0)._Render()
	End
	
	Function _Entities:List<Entity>()
		Return mEntities
	End
Private
	Global mLastMillisecs				: Int
	Global mDeltaTime						: Float
	Global mEntities						: List<Entity> = New List<Entity>
	Global mEnabledEntities			: List<Entity> = New List<Entity>
	Global mVisibleEntities			: List<Entity> = New List<Entity>
	Global mCameras							: List<Camera> = New List<Camera>
	Global mLights							: List<Light> = New List<Light>
	Global mSkybox							: Mesh
	Global mSunPitch						: Float
	Global mSunYaw							: Float
	Global mSunColor						: Int
	Global mAmbient							: Int
	Global mFogEnabled					: Bool
	Global mFogMin							: Float
	Global mFogMax							: Float
	Global mFogColor						: Int
	Global mSeparateDepthPass		: Bool
	Global mFramebuffer					: Framebuffer
	Global mShadowsEnabled			: Bool
	Global mShadowsRange				: Float
	Global mShadowsSunDist			: Float
	Global mDepthProj						: Float[16]
	Global mDepthView						: Float[16]
	Global mColBoxes						: Box[0]
	Global mTempArr							: Float[4]
	
	Method New()
	End
End

Private

Class Box	
	Method New()
		mMin = New Float[3]
		mMax = New Float[3]
	End
	
	Method New(x0:Float, y0:Float, z0:Float, x1:Float, y1:Float, z1:Float)
		Self.mMin = [x0, y0, z0]
		Self.mMax = [x1, y1, z1]
	End
	
	Method Min:Float[]() Property
		Return mMin
	End
	
	Method Max:Float[]() Property
		Return mMax
	End
Private
	Field mMin	: Float[]
	Field mMax	: Float[]
End
