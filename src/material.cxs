Strict

Private
Import color
Import math3d
Import renderer
Import renderstate
Import shader
Import texture

Public

Class Material
Public
	Method New(colorTex:Texture = Null, shader:Shader = Null)
		mShader = shader
		mColor = color.Color.White
		mColorTex = colorTex
		mShininess = 0.001
		mCubeOpacity = 0.5
		mRefractCoef = -1
		mBlendMode = Renderer.BlendSolid
		mCulling = True
		mDepthWrite = True
		mLighting = True
		mCastShadows = True
		mReceiveShadows = True
		mFog = True
		mSpecularPower = 64
		Mat4Identity(mTextureMatrix)
	End
	
	Method New(other:Material)
		Set(other)
	End
	
	Method DiscardTextures:Void()
		If mColorTex Then mColorTex.Discard()
		If mNormalTex Then mNormalTex.Discard()
		If mShininessTex Then mShininessTex.Discard()
		If mLightTex Then mLightTex.Discard()
		If mCubeTex Then mCubeTex.Discard()
	End
	
	Method IsEqual:Bool(other:Material)
		If Self = other Then Return True
		If mShader = other.mShader And mColor = other.mColor And mColorTex = other.mColorTex And mNormalTex = other.mNormalTex And mShininessTex = other.mShininessTex And mLightTex = other.mLightTex And mCubeTex = other.mCubeTex And mShininess = other.mShininess And mSpecularPower = other.mSpecularPower And mCubeOpacity = other.mCubeOpacity And mRefractCoef = other.mRefractCoef And mBlendMode = other.mBlendMode And mLighting = other.mLighting And mCulling = other.mCulling And mDepthWrite = other.mDepthWrite And mCastShadows = other.mCastShadows And mReceiveShadows = other.mReceiveShadows And mFog = other.mFog
			Return True
		Else
			Return False
		End
	End

	Method Set:Void(other:Material)
		If Self.IsEqual(other) Then Return
		mShader = other.mShader
		mColor = other.mColor
		mColorTex = other.mColorTex
		mNormalTex = other.mNormalTex
		mShininessTex = other.mShininessTex
		mLightTex = other.mLightTex
		mCubeTex = other.mCubeTex
		mShininess = other.mShininess
		mSpecularPower = other.mSpecularPower
		mCubeOpacity = other.mCubeOpacity
		mRefractCoef = other.mRefractCoef
		mBlendMode = other.mBlendMode
		mLighting = other.mLighting
		mCulling = other.mCulling
		mDepthWrite = other.mDepthWrite
		mCastShadows = other.mCastShadows
		mReceiveShadows = other.mReceiveShadows
		mFog = other.mFog
		Mat4Copy(other.mTextureMatrix, mTextureMatrix)
	End
	
	Method Shader:Void(shader:Shader) Property
		mShader = shader
	End
	
	Method Shader:Shader() Property
		Return mShader
	End
	
	Method Color:Void(color:Int) Property
		mColor = color
	End

	Method Color:Int() Property
		Return mColor
	End
	
	Method ColorTexture:Void(tex:Texture) Property
		mColorTex = tex
	End

	Method ColorTexture:Texture() Property
		Return mColorTex
	End
	
	Method NormalTexture:Void(tex:Texture) Property
		mNormalTex = tex
	End
	
	Method NormalTexture:Texture() Property
		Return mNormalTex
	End
	
	Method ShininessTexture:Void(tex:Texture) Property
		mShininessTex = tex
	End
	
	Method ShininessTexture:Texture() Property
		Return mShininessTex
	End
	
	Method LightTexture:Void(tex:Texture) Property
		mLightTex = tex
	End
	
	Method LightTexture:Texture() Property
		Return mLightTex
	End
	
	Method CubeTexture:Void(tex:Texture) Property
		mCubeTex = tex
	End
	
	Method CubeTexture:Texture() Property
		Return mCubeTex
	End

	Method Shininess:Void(shininess:Float) Property
		'shininess = Clamp(shininess, 0.0, 1.0)
		mShininess = shininess
	End

	Method Shininess:Float() Property
		Return mShininess
	End
	
	Method SpecularPower:Void(power:Float) Property
		mSpecularPower = power
	End
	
	Method SpecularPower:Float() Property
		Return mSpecularPower
	End
	
	Method CubeOpacity:Void(opacity:Float) Property
		opacity = Clamp(opacity, 0.0, 1.0)
		mCubeOpacity = opacity
	End
	
	Method CubeOpacity:Float() Property
		Return mCubeOpacity
	End
	
	Method RefractionCoef:Void(coef:Float) Property
		mRefractCoef = coef
	End
	
	Method RefractionCoef:Float() Property
		Return mRefractCoef
	End

	Method BlendMode:Void(mode:Int) Property
		mBlendMode = mode
	End

	Method BlendMode:Int() Property
		Return mBlendMode
	End
	
	Method Lighting:Void(enable:Bool) Property
		mLighting = enable
	End
	
	Method Lighting:Bool() Property
		Return mLighting
	End

	Method Culling:Void(enable:Bool) Property
		mCulling = enable
	End

	Method Culling:Bool() Property
		Return mCulling
	End

	Method DepthWrite:Void(enable:Bool) Property
		mDepthWrite = enable
	End

	Method DepthWrite:Bool() Property
		Return mDepthWrite
	End
	
	Method CastShadows:Void(enable:Bool) Property
		mCastShadows = enable
	End
	
	Method CastShadows:Bool() Property
		Return mCastShadows
	End
	
	Method ReceiveShadows:Void(enable:Bool) Property
		mReceiveShadows = enable
	End
	
	Method ReceiveShadows:Bool() Property
		Return mReceiveShadows
	End
	
	Method Fog:Bool() Property
		Return mFog
	End
	
	Method Fog:Void(enable:Bool) Property
		mFog = enable
	End
	
	Method TextureMatrix:Float[]() Property
		Return mTextureMatrix
	End

	Method _PrepareForRender:Bool(step_:Int)
		'Abort if this material does not render in this step
		If step_ = StepShadows And (mBlendMode <> Renderer.BlendSolid Or Not CastShadows) Then Return False
		If step_ = StepSolid And (mBlendMode <> Renderer.BlendSolid Or Not mDepthWrite) Then Return False
		If step_ = StepDepthWrite And (mBlendMode = Renderer.BlendSolid Or Not mDepthWrite) Then Return False
		If step_ = StepNoDepthWrite And mDepthWrite Then Return False
		
		'Set renderer settings
		Renderer.Color(mColor)
		RenderState.Shininess = mShininess
		RenderState.SpecularPower = mSpecularPower
		RenderState.CubeOpacity = mCubeOpacity
		RenderState.RefractCoef = mRefractCoef
		Renderer.BlendMode(mBlendMode)
		Renderer.SetCulling(mCulling)
		Mat4Copy(mTextureMatrix, RenderState.TextureMatrix)
		If Not RenderState.SeparateDepthPass Or step_ <> StepSolid Then Renderer.SetDepthWrite(mDepthWrite)
	
		'Set textures
		Local colorHandle:Int = 0
		Local normalHandle:Int = 0
		Local shininessHandle:Int = 0
		Local lightHandle:Int = 0
		Local cubeHandle:Int = 0
		If mColorTex <> Null Then colorHandle = mColorTex.Handle
		If mNormalTex <> Null Then normalHandle = mNormalTex.Handle
		If mShininessTex <> Null Then shininessHandle = mShininessTex.Handle
		If mLightTex <> Null Then lightHandle = mLightTex.Handle
		If mCubeTex <> Null Then cubeHandle = mCubeTex.Handle
		Renderer.SetTextures(colorHandle, normalHandle, shininessHandle, lightHandle, cubeHandle)
		
		'Override NumLights state with Lighting property
		Local prevNumLights:Int = RenderState.NumLights
		If Not Lighting Then RenderState.NumLights = 0
		
		'Override ShadowsEnabled state with ReceiveShadows property
		Local prevShadowsEnabled:Bool = RenderState.ShadowsEnabled
		If Not ReceiveShadows Then RenderState.ShadowsEnabled = False
		
		'Override FogEnabled state with Fog property
		Local prevFogEnabled:Bool = RenderState.FogEnabled
		If Not Fog Then RenderState.FogEnabled = False
		
		'Prepare bound shader
		If mShader <> Null
			mShader._Prepare()
		Else
			Shader._CurrentDefault()._Prepare()
		End
		
		'Restore state settings
		RenderState.NumLights = prevNumLights
		RenderState.ShadowsEnabled = prevShadowsEnabled
		RenderState.FogEnabled = prevFogEnabled
		
		Return True
	End
	
	'Used internally by the engine
	Const StepShadows:Int = 0				'Shadow step
	Const StepSolid:Int = 1					'Solid blend with depth writing
	Const StepDepthWrite:Int = 2			'Other blends with depth writing
	Const StepNoDepthWrite:Int = 3		'All entitites with no depth writing
	Const StepCount:Int = 4
Private
	Field mShader				: Shader
	Field mColor					: Int
	Field mColorTex				: Texture
	Field mNormalTex			: Texture
	Field mShininessTex    : Texture
	Field mLightTex				: Texture
	Field mCubeTex				: Texture
	Field mShininess			: Float
	Field mSpecularPower	: Float
	Field mCubeOpacity		: Float
	Field mRefractCoef		: Float
	Field mBlendMode			: Int
	Field mLighting				: Bool
	Field mCulling				: Bool
	Field mDepthWrite			: Bool
	Field mCastShadows		: Bool
	Field mReceiveShadows	: Bool
	Field mFog				: Bool
	Field mTextureMatrix	: Float[16]
End
