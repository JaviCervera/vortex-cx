Strict

Private
Import color
Import material
Import math3d
Import renderer
Import renderstate
Import surface
Import texture
Import world

Public
Import entity

Class Sprite Extends Entity 'Implements IMaterialDelegate Final
	Const ModeStatic		: Int = 0
	Const ModeSpherical	: Int = 1
	Const ModeCylindrical	: Int = 2
	
	Method New(texture:Texture, hframes:Int = 1, vframes:Int = 1, orientation:Int = ModeSpherical, parent:Entity = Null)
		Super.New(parent)
		mOrientation = orientation
		mMaterial = New Material(texture)', Self)
		mMaterial.BlendMode = Renderer.BlendAlpha
		mMaterial.Culling = False
		
		
		'Create quad
		If mSurface = Null
			mSurface = New Surface()
			mSurface.AddVertex(-0.5,  0.5, 0,  0, 0, -1,  Color.White,  0, 0)
			mSurface.AddVertex( 0.5,  0.5, 0,  0, 0, -1,  Color.White,  1, 0)
			mSurface.AddVertex( 0.5, -0.5, 0,  0, 0, -1,  Color.White,  1, 1)
			mSurface.AddVertex(-0.5, -0.5, 0,  0, 0, -1,  Color.White,  0, 1)
			mSurface.AddTriangle(0, 1, 2)
			mSurface.AddTriangle(0, 2, 3)
			mSurface.Rebuild()
		End
		
		'Set size
		If texture <> Null
			Size(texture.Width / hframes, texture.Height / vframes)
		Else
			Size(1, 1)
		End
		
		'Set frames
		Frames(hframes, vframes)
		LastFrame = Frames-1
		
		'Make visible
		Visible = True
		
		'Make active
		Active = True
	End
	
	Method Active:Bool() Property
		Return Super.Active
	End
	
	Method Active:Void(active:Bool) Property
		If active <> Super.Active
			Super.Active(active)
			World._EntityNeedsUpdate(Self, active)
		End
	End
	
	Method Visible:Void(visible:Bool) Property
		If visible <> Super.Visible
			Super.Visible(visible)
			World._EntitySetVisible(Self, visible)
			#Rem
			If visible
				World._AddSurfaceToRenderList(mSurface, _Transform, mMaterial)
				World._EntityNeedsPrepareRender(Self, True)
			Else
				World._RemoveSurfaceFromRenderList(mSurface, _Transform, mMaterial)
				World._EntityNeedsPrepareRender(Self, False)
			End
			#End
		End
	End
	
	Method Visible:Bool() Property
		Return Super.Visible
	End
	
	Method Orientation:Int() Property
		Return mOrientation
	End
	
	Method Orientation:Void(orientation:Int) Property
		mOrientation = orientation
	End
	
	Method Spin:Float() Property
		Return Roll
	End
	
	Method Spin:Void(spin:Float) Property
		Rotate(Pitch, Yaw, spin)
	End
	
	Method Depth:Float() Property
		Return 0
	End
	
	Method Size:Void(width:Float, height:Float)
		Scale(width, height, 1)
	End
	
	Method Frames:Int() Property
		Return HFrames * VFrames
	End
	
	Method HFrames:Int() Property
		Return mHFrames
	End
	
	Method VFrames:Int() Property
		Return mVFrames
	End
	
	Method Frames:Void(horizontal:Int, vertical:Int)
		mHFrames = horizontal
		mVFrames = vertical
	End
	
	Method AnimFPS:Int() Property
		Return mAnimFPS
	End
	
	Method AnimFPS:Void(fps:Int) Property
		mAnimFPS = fps
	End
	
	Method CurrentFrame:Int() Property
		Return mCurrentFrame
	End
	
	Method CurrentFrame:Void(frame:Int) Property
		mCurrentFrame = frame
	End
	
	Method FirstFrame:Int() Property
		Return mFirstFrame
	End
	
	Method FirstFrame:Void(frame:Int) Property
		mFirstFrame = Clamp(frame, 0, Frames-1)
	End
	
	Method LastFrame:Int() Property
		Return mLastFrame
	End
	
	Method LastFrame:Void(frame:Int) Property
		mLastFrame = Clamp(frame, 0, Frames-1)
	End
	
	Method NumMaterials:Int() Property
		Return 1
	End
	
	Method Material:Material(index:Int)
		Return mMaterial
	End
	
	Method Material:Material() Property
		Return Material(0)
	End
	
	#Rem
	Method MaterialChanged:Void(mat:Material)
		World._RemoveSurfaceFromRenderList(mSurface, _Transform)
		If Visible Then World._AddSurfaceToRenderList(mSurface, _Transform, mat)
	End
	#End
	
	Method BoxMinZ:Float() Property
		Return BoxMinX
	End
	
	Method BoxMaxZ:Float() Property
		Return BoxMaxX
	End
	
	Method _Update:Void()
		If mAnimFPS <> 0
			mCurrentFrame += mAnimFPS * World.DeltaTime()
			If Int(mCurrentFrame) > LastFrame Then mCurrentFrame -= (LastFrame - FirstFrame) + 1
			If Int(mCurrentFrame) < FirstFrame Then mCurrentFrame += (LastFrame - FirstFrame) + 2
		End
	End
	
	Method _Render:Int(step_:Int)
		'*** This will be faster if matrices are only updated in the correct step
		
		'Texture matrix
		Local row:Int = Int(mCurrentFrame) / HFrames
		Local col:Int = Int(mCurrentFrame) Mod HFrames
		Mat4Identity(mMaterial.TextureMatrix)
		Mat4Scale(mMaterial.TextureMatrix, 1.0 / HFrames, 1.0 / VFrames, 1.0, mMaterial.TextureMatrix)
		Mat4Translate(mMaterial.TextureMatrix, col, row, 0, mMaterial.TextureMatrix)
		
		'Orientation
		If mOrientation <> ModeStatic
			Local cylindrical:Bool = False
			If mOrientation = ModeCylindrical Then cylindrical = True
			Mat4BillboardLH(RenderState.ViewMatrix, WorldX, WorldY, WorldZ, Spin, Width, Height, cylindrical, _Transform)
		End
		
		Super._Render(step_)
		
		If mMaterial._PrepareForRender(step_)	
			mSurface._Render()
			Return 1
		Else
			Return 0
		End
	End
Private
	Field mOrientation	: Int
	Field mMaterial		: Material
	Field mHFrames		: Int
	Field mVFrames		: Int
	Field mAnimFPS		: Int
	Field mCurrentFrame	: Float
	Field mFirstFrame	: Int
	Field mLastFrame	: Int
	Global mSurface		: Surface
	
	Method New()
	End
End
