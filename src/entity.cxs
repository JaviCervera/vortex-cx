Strict

Private
Import collision
Import listener
Import material
Import math3d
Import mojo.audio
Import renderer
Import renderstate
Import world


Public
Class Entity
	Const CollisionNone	: Int = 0
	Const CollisionSphere	: Int = 1
	Const CollisionBox		: Int = 2

    '---------------------------------------------------------------------------------------
Private

	Field mPickable: Bool
	
Public
	
	Method RayTrace:Bool( traceInfo:Object, rayOrigin:Float[], rayDirection:Float[], maxDistance:Float = 0.0 )
	    Return False
	End
	
	Method Pickable:Bool() Property
	    Return mPickable
	End
	
	Method Pickable:Void( state:Bool ) Property
	    mPickable = state
	End    
	'---------------------------------------------------------------------------------------

	Method New(parent:Entity = Null)
		mChildren = New List<Entity>
		Parent = parent
		mActive = False		'Subclases should change this if needed
		mVisible = False	'Subclases should change this if needed
		mPickable = False
		Scale(1, 1, 1)
		World._AddEntity(Self)
		_UpdateTransform()
	End
	
	Method Discard:Void()
		Visible = False
		While Not mChildren.IsEmpty()
			mChildren.First().Discard()
		Wend
		Parent = Null
		World._FreeEntity(Self)
	End
	
	Method Name:String() Property
		Return mName
	End
	
	Method Name:Void(name:String) Property
		mName = name
	End
	
	Method Parent:Entity() Property
		Return mParent
	End
	
	Method Parent:Void(p:Entity) Property
		If mParent <> p
			If mParent Then mParent.mChildren.RemoveFirst(Self)
			If p Then p.mChildren.AddLast(Self)
			mParent = p
			_UpdateTransform()
		End
	End
	
	Method NumChildren:Int() Property
		Return mChildren.Count()
	End
	
	Method Child:Entity(index:Int)
		Local current:Int = 0
		For Local e:Entity = Eachin mChildren
			If current = index Then Return e
			current += 1
		Next
		Return Null
	End
	
	Method Active:Bool() Property
		Return mActive
	End
	
	Method Active:Void(active:Bool) Property
		'World._EntityNeedsUpdate(Self, active)
		mActive = active
		For Local c:Entity = Eachin mChildren
			c.Active = active
		Next
	End
	
	Method Visible:Bool() Property
		Return mVisible
	End
	
	Method Visible:Void(visible:Bool) Property
		mVisible = visible
		For Local c:Entity = Eachin mChildren
			c.Visible = visible
		Next
	End

	
	Method X:Float() Property
		Return mPosition[0]
	End
	
	Method Y:Float() Property
		Return mPosition[1]
	End
	
	Method Z:Float() Property
		Return mPosition[2]
	End
	
	Method X:Void(val:Float) Property
		mPosition[0] = val
		_UpdateTransform()
	End
	
	Method Y:Void(val:Float) Property
		mPosition[1] = val
		_UpdateTransform()
	End
	
	Method Z:Void(val:Float) Property
		mPosition[2] = val
		_UpdateTransform()
	End
	
	Method WorldX:Float() Property
		Return mTransform[12]
	End
	
	Method WorldY:Float() Property
		Return mTransform[13]
	End
	
	Method WorldZ:Float() Property
		Return mTransform[14]
	End
	
	Method Position:Void(x:Float, y:Float, z:Float)
		Vec3Set(x, y, z, mPosition)
		_UpdateTransform()
	End
	
	Method Move:Void(x:Float, y:Float, z:Float, collideWithEntities:Bool = True)
		'Transform x, y, z by entity's rotation
		QuatSetEuler(mRotation[0], mRotation[1], mRotation[2], mTempArr)
		QuatMulVec3(mTempArr[0], mTempArr[1], mTempArr[2], mTempArr[3], x, y, z, mTempArr)
		
		If CollisionMode <> CollisionNone 'And Active
			'Reset collision status
			mCollided = False
			mCollidedEntity = Null
			
			'Check static collisions
			If World._CheckStaticCollision(WorldX + mTempArr[0], WorldY, WorldZ, mSqRadius) Then mCollided = True; mTempArr[0] = 0
			If World._CheckStaticCollision(WorldX, WorldY + mTempArr[1], WorldZ, mSqRadius) Then mCollided = True; mTempArr[1] = 0
			If World._CheckStaticCollision(WorldX, WorldY, WorldZ + mTempArr[2], mSqRadius) Then mCollided = True; mTempArr[2] = 0
			
			'Check collisions with other entities
			If collideWithEntities
				For Local other:Entity = Eachin World._Entities()
					'Do not check collisions with itself
					If other <> Self And other.CollisionMode <> CollisionNone And other.Active
						If CollisionMode = CollisionSphere And other.CollisionMode = CollisionSphere
							If Collision.SphereSphere(WorldX + mTempArr[0], WorldY, WorldZ, mSqRadius, other.WorldX, other.WorldY, other.WorldZ, other.mSqRadius)
								mCollided = True
								mCollidedEntity = other
								mTempArr[0] = 0
							End
							If Collision.SphereSphere(WorldX, WorldY + mTempArr[1], WorldZ, mSqRadius, other.WorldX, other.WorldY, other.WorldZ, other.mSqRadius)
								mCollided = True
								mCollidedEntity = other
								mTempArr[1] = 0
							End
							If Collision.SphereSphere(WorldX, WorldY, WorldZ + mTempArr[2], mSqRadius, other.WorldX, other.WorldY, other.WorldZ, other.mSqRadius)
								mCollided = True
								mCollidedEntity = other
								mTempArr[2] = 0
							End
						Elseif CollisionMode = CollisionSphere And other.CollisionMode = CollisionBox
							If Collision.BoxSphere(other.BoxMinX, other.BoxMinY, other.BoxMinZ, other.BoxMaxX, other.BoxMaxY, other.BoxMaxZ, WorldX + mTempArr[0], WorldY, WorldZ, mSqRadius)
								mCollided = True
								mCollidedEntity = other
								mTempArr[0] = 0
							End
							If Collision.BoxSphere(other.BoxMinX, other.BoxMinY, other.BoxMinZ, other.BoxMaxX, other.BoxMaxY, other.BoxMaxZ, WorldX, WorldY + mTempArr[1], WorldZ, mSqRadius)
								mCollided = True
								mCollidedEntity = other
								mTempArr[1] = 0
							End
							If Collision.BoxSphere(other.BoxMinX, other.BoxMinY, other.BoxMinZ, other.BoxMaxX, other.BoxMaxY, other.BoxMaxZ, WorldX, WorldY, WorldZ + mTempArr[2], mSqRadius)
								mCollided = True
								mCollidedEntity = other
								mTempArr[2] = 0
							End
						Elseif CollisionMode = CollisionBox And other.CollisionMode = CollisionSphere
							If Collision.BoxSphere(BoxMinX + mTempArr[0], BoxMinY, BoxMinZ, BoxMaxX + mTempArr[0], BoxMaxY, BoxMaxZ, other.WorldX, other.WorldY, other.WorldZ, other.mSqRadius)
								mCollided = True
								mCollidedEntity = other
								mTempArr[0] = 0
							End
							If Collision.BoxSphere(BoxMinX, BoxMinY + mTempArr[1], BoxMinZ, BoxMaxX, BoxMaxY + mTempArr[1], BoxMaxZ, other.WorldX, other.WorldY, other.WorldZ, other.mSqRadius)
								mCollided = True
								mCollidedEntity = other
								mTempArr[1] = 0
							End
							If Collision.BoxSphere(BoxMinX, BoxMinY, BoxMinZ + mTempArr[2], BoxMaxX, BoxMaxY, BoxMaxZ + mTempArr[2], other.WorldX, other.WorldY, other.WorldZ, other.mSqRadius)
								mCollided = True
								mCollidedEntity = other
								mTempArr[2] = 0
							End
						Elseif CollisionMode = CollisionBox And other.CollisionMode = CollisionBox
							If Collision.BoxBox(BoxMinX + mTempArr[0], BoxMinY, BoxMinZ, BoxMaxX + mTempArr[0], BoxMaxY, BoxMaxZ, other.BoxMinX, other.BoxMinY, other.BoxMinZ, other.BoxMaxX, other.BoxMaxY, other.BoxMaxZ)
								mCollided = True
								mCollidedEntity = other
								mTempArr[0] = 0
							End
							If Collision.BoxBox(BoxMinX, BoxMinY + mTempArr[1], BoxMinZ, BoxMaxX, BoxMaxY + mTempArr[1], BoxMaxZ, other.BoxMinX, other.BoxMinY, other.BoxMinZ, other.BoxMaxX, other.BoxMaxY, other.BoxMaxZ)
								mCollided = True
								mCollidedEntity = other
								mTempArr[1] = 0
							End
							If Collision.BoxBox(BoxMinX, BoxMinY, BoxMinZ + mTempArr[2], BoxMaxX, BoxMaxY, BoxMaxZ + mTempArr[2], other.BoxMinX, other.BoxMinY, other.BoxMinZ, other.BoxMaxX, other.BoxMaxY, other.BoxMaxZ)
								mCollided = True
								mCollidedEntity = other
								mTempArr[2] = 0
							End
						End
						
						'If it has collided with an entity, do not check for more collisions
						If mCollidedEntity <> Null Then Exit
					End
				Next
			End
		End
		
		'Go to destination point
		Vec3Add(mPosition[0], mPosition[1], mPosition[2], mTempArr[0], mTempArr[1], mTempArr[2], mPosition)
		
		_UpdateTransform()
	End
	
	Method Pitch:Float() Property
		Return mRotation[0]
	End
	
	Method Yaw:Float() Property
		Return mRotation[1]
	End
	
	Method Roll:Float() Property
		Return mRotation[2]
	End
	
	Method Pitch:Void(val:Float) Property
		mRotation[0] = val
		_UpdateTransform()
	End
	
	Method Yaw:Void(val:Float) Property
		mRotation[1] = val
		_UpdateTransform()
	End
	
	Method Roll:Void(val:Float) Property
		mRotation[2] = val
		_UpdateTransform()
	End
	
	Method Rotate:Void(pitch:Float, yaw:Float, roll:Float)
		Vec3Set(pitch, yaw, roll, mRotation)
		_UpdateTransform()
	End
	
	Method Turn:Void(pitch:Float, yaw:Float, roll:Float)
		Vec3Add(mRotation[0], mRotation[1], mRotation[2], pitch, yaw, roll, mRotation)
		_UpdateTransform()
	End
	
	Method LookAt:Void(targetX:Float, targetY:Float, targetZ:Float, rollAngle:Float = 0.0)
	    Local dirX := targetX - mPosition[0]
	    Local dirY := targetY - mPosition[1]
	    Local dirZ := targetZ - mPosition[2]
	    mRotation[0] = -ATan2(dirY, Sqrt(dirX * dirX + dirZ * dirZ))
	    mRotation[1] =  ATan2(dirX, dirZ)
	    mRotation[2] = rollAngle
	End
	
	Method LookAt:Void(targetEntity:Entity, rollAngle:Float = 0.0)
	    LookAt(targetEntity.mPosition[0], targetEntity.mPosition[1], targetEntity.mPosition[2], rollAngle)
	End
		
	Method Width:Float() Property
		Return mScale[0]
	End
	
	Method Height:Float() Property
		Return mScale[1]
	End
	
	Method Depth:Float() Property
		Return mScale[2]
	End
	
	Method ScaleX:Float() Property
		Return mScale[0]
	End
	
	Method ScaleY:Float() Property
		Return mScale[1]
	End
	
	Method ScaleZ:Float() Property
		Return mScale[2]
	End
	
	Method ScaleX:Void(val:Float) Property
		mScale[0] = val
		_UpdateTransform()
	End
	
	Method ScaleY:Void(val:Float) Property
		mScale[1] = val
		_UpdateTransform()
	End
	
	Method ScaleZ:Void(val:Float) Property
		mScale[2] = val
		_UpdateTransform()
	End

	Method Scale:Void(x:Float, y:Float, z:Float)
		Vec3Set(x, y, z, mScale)
		_UpdateTransform()
	End
	
	Method CollisionMode:Int() Property
		Return mCollisionMode
	End
	
	Method CollisionMode:Void(mode:Int) Property
		mCollisionMode = mode
	End

	Method Radius:Float() Property
		Return mRadius
	End
	
	Method Radius:Void(rad:Float) Property
		mRadius = rad
		mSqRadius = rad * rad
	End
	
	Method Collided:Bool() Property
		Return mCollided
	End
	
	Method CollidedEntity:Entity() Property
		Return mCollidedEntity
	End
	
	Method Distance:Float(other:Entity)
		Vec3Sub(mPosition[0], mPosition[1], mPosition[2], other.mPosition[0], other.mPosition[1], other.mPosition[2], mTempArr)
		Return Vec3Length(mTempArr[0], mTempArr[1], mTempArr[2])
	End
	
	Method NumMaterials:Int() Property
		Return 0
	End
	
	Method Material:Material(index:Int)
		Return Null
	End
	
	Method Material:Material() Property
		Return Material(0)
	End
	
	Method ReplaceMaterials:Void(mat:Material)
		For Local i:Int = 0 Until NumMaterials
			Material(i).Set(mat)
		Next
	End
	
	Method EmitSound:Void(sound:Sound, radius:Float, channel:Int)
		Listener._EmitSound(Self, sound, radius, channel)
	End
	
	Method BoxMinX:Float() Property
		Return WorldX - Width/2
	End
	
	Method BoxMinY:Float() Property
		Return WorldY - Height/2
	End
	
	Method BoxMinZ:Float() Property
		Return WorldZ - Depth/2
	End
	
	Method BoxMaxX:Float() Property
		Return WorldX + Width/2
	End
	
	Method BoxMaxY:Float() Property
		Return WorldY + Height/2
	End
	
	Method BoxMaxZ:Float() Property
		Return WorldZ + Depth/2
	End
	
	Method UserData:Object() Property
		Return mUserData
	End
	
	Method UserData:Void(data:Object) Property
		mUserData = data
	End
	
	Method _Update:Void()
	End
	
	Method _Render:Int(step_:Int)
		Mat4Copy(mTransform, RenderState.ModelMatrix)
		Return 0
	End
	
	Method _Transform:Float[]() Property
		Return mTransform
	End
Private
	Field mName					: String
	Field mParent				: Entity
	Field mChildren				: List<Entity>
	Field mActive				: Bool
	Field mVisible				: Bool
	Field mPosition				: Float[3]
	Field mRotation				: Float[3]
	Field mScale				: Float[3]
	Field mTransform			: Float[16]
	Field mCollisionMode		: Int
	Field mRadius				: Float
	Field mSqRadius				: Float
	Field mCollided				: Bool
	Field mCollidedEntity		: Entity
	Field mUserData				: Object
	
	Method _UpdateTransform:Void()
		'Set entity's transform
		Mat4TransformEuler(mPosition[0], mPosition[1], mPosition[2], mRotation[0], mRotation[1], mRotation[2], mScale[0], mScale[1], mScale[2], mTransform)
		
		'Premultiply paren't transform
		If mParent Then Mat4MulSafe(mParent.mTransform, mTransform, mTransform)
		
		'Update children's transforms
		For Local child:Entity = Eachin mChildren
			child._UpdateTransform()
		Next
	End
	
	Global mTempArr		: Float[4]
End
