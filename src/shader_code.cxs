Strict

Const StdStructs:String = "" +
"struct FogInfo { vec3 Data; vec3 Color; };" +						'Data[0], Data[1] -> Min and max distance. Data[2] -> 0 if fog is disabled, 1 if fog is enabled.
"struct LightInfo { vec4 Vector; vec4 Data; };" +					'Vector contains light pos in viewer space. Data contains light color on xyz, and radius on w
"struct LightingResult { vec3 Diffuse; vec3 Specular; };"

Const StdUniforms:String = "" +
"uniform mat4 ModelViewProjection;" +
"uniform mat4 ModelView;" +
"uniform mat4 InverseView;" +
"uniform mat4 NormalMatrix;" +
"uniform mat4 TextureMatrix;" +
"uniform mat4 DepthBiasMatrix;" +
"uniform int NumLights;" +
"uniform LightInfo Lights[MAX_LIGHTS];" +
"uniform vec3 Ambient;" +
"uniform vec4 MaterialColor;" +
"uniform float MaterialShininess;" +
"uniform float MaterialSpecularPower;" +
"uniform float CubeOpacity;" +
"uniform float MaterialRefractCoef;" +
"uniform float DepthEpsilon;" +
"uniform FogInfo Fog;" +
'"uniform mat4 Bones[MAX_BONES];" +
'These uniforms should be compacted into a flags int
'"uniform int Flags;" +
"uniform bool UseColorTex;" +
"uniform bool UseNormalTex;" +
"uniform bool UseShininessTex;" +
"uniform bool UseLightmap;" +
"uniform bool UseCubemap;" +
"uniform bool Skinned;" +
"uniform bool SolidMode;" +
"uniform bool ShadowsEnabled;"

Const StdAttributes:String = "" +
"attribute vec3 VertexPos;" +
"attribute vec3 VertexNormal;" +
"attribute vec3 VertexTangent;" +
"attribute vec4 VertexColor;" +
"attribute vec4 VertexTexCoords;" +
"attribute vec4 VertexBoneIndices;" +
"attribute vec4 VertexBoneWeights;"

Const StdSamplers:String = "" +
"uniform sampler2D BaseTexSampler;" +
"uniform sampler2D NormalTexSampler;" +
"uniform sampler2D ShininessTexSampler;" +
"uniform sampler2D LightmapSampler;" +
"uniform samplerCube CubemapSampler;" +
"uniform sampler2D DepthSampler;"

Const StdVaryings:String = "" +
"varying vec3 FVertexPos;" +						'Used in fragment lighting only
"varying vec3 FNormalizedVertexPos;" +	'Used in fragment lighting only
"varying vec3 FVertexNormal;" +					'Used in fragment lighting only
"varying vec4 FVertexColor;" +
"varying vec4 FVertexTexCoords;" +
"varying vec3 FCombinedDiffuse;" +			'Used in vertex lighting only
"varying vec3 FCombinedSpecular;" +			'Used in vertex lighting only
"varying float FFogFactor;" +						'Used with fog enabled only
"varying vec3 FCubeCoords;" +						'Used in cube mapping only
"varying vec3 FDepthCoords;" +					'Used when shadowing only
"varying mat3 FTBNMatrix;"							'Used in normal mapping only

Const StdVertexVars:String = "" +
StdStructs +
StdUniforms +
StdAttributes +
StdVaryings

Const StdFragmentVars:String = "" +
StdStructs +
StdUniforms +
StdSamplers +
StdVaryings

Const ShaderCalcLighting:String = "" +
"LightingResult CalcLighting(vec3 V, vec3 NV, vec3 N, vec3 texShininess) {" +
"	LightingResult lighting;" +
"	lighting.Diffuse = Ambient;" +
"	lighting.Specular = vec3(0.0, 0.0, 0.0);" +

	'Compute all lights
"	for ( int i = 0; i < MAX_LIGHTS; ++i ) {" +
"		if ( i >= NumLights ) break;" +
"   	vec3 L = vec3(Lights[i].Vector);" +
"   	float att = 1.0;" +

		'Point light
"		if ( Lights[i].Vector.w == 1.0 ) {" +
"			L -= V;" +
"			att = 1.0 - clamp(length(L) / Lights[i].Data.w, 0.0, 1.0);" +
"		}" +

"		L = normalize(L);" +
"		float NdotL = max(dot(N, L), 0.0);" +

		'Diffuse
"		lighting.Diffuse += NdotL * vec3(Lights[i].Data) * att;" +

		'Specular
"		if ( MaterialShininess > 0.0 && NdotL > 0.0 ) {" +
"			vec3 H = normalize(L - NV);" +
"			float NdotH = max(dot(N, H), 0.0);" +
"			lighting.Specular += pow(NdotH, MaterialSpecularPower * MaterialShininess * texShininess.r) * vec3(Lights[i].Data) * MaterialShininess * texShininess * att;" +
'"			float SpecPower = MaterialSpecularPower * MaterialShininess * texShininess.r;" +
'"			lighting.Specular += pow(NdotH, SpecPower) * vec3(Lights[i].Data) * texShininess * ((SpecPower + 8.0) / 50.26548245744) * att;" +
"		}~n" +
"	}~n" +

"	lighting.Diffuse = clamp(lighting.Diffuse, 0.0, 1.0);" +
"	lighting.Specular = clamp(lighting.Specular, 0.0, 1.0);" +
"	return lighting;" +
"}~n"

#Rem
Const ShaderCalcSkinning:String = "" +
"vec4 CalcSkinning(vec4 vertex) {" +
"	mat4 boneTransform = mat4(1);" +
"	for ( int i = 0; i < 4; ++i ) {" +
"		int index = int(floor(VertexBoneIndices[i]));" +
"		if ( index > -1 ) boneTransform += Bones[index] * VertexBoneWeights[i];" +
"	}" +
"	return boneTransform * vertex;" +
"}~n"
#End

Const ShaderCalcCubeCoords:String = "" +
"vec3 CalcCubeCoords(vec3 NV, vec3 N) {" +
"	if ( MaterialRefractCoef < 0.0 ) return normalize(vec3(InverseView * vec4(reflect(NV, N), 0)));" +
"	else return normalize(vec3(InverseView * vec4(refract(NV, N, MaterialRefractCoef), 0)));" +
"}"

Const ShaderCalcTbnMatrix:String = "" +
"mat3 CalcTBNMatrix(vec3 normal, vec3 tangent) {" +
"	return mat3(tangent, cross(tangent, normal), normal);" +
"}"

Const MinVertexShader:String = StdVertexVars + ShaderCalcLighting + 'ShaderCalcSkinning +
"void main() {" +
	'Get vec4 version of VertexPos
"	vec4 VertexPos4 = vec4(VertexPos, 1);" +

	'Vertex skinning
'"	if ( Skinned ) VertexPos4 = CalcSkinning(VertexPos4);" +

	'Calculate vectors used in lighting and fog calculations
"	vec3 V;" +
"	vec3 NV;" +
"	vec3 N;" +
"	if ( NumLights > 0 || Fog.Data[2] != 0.0 ) {" +
" 	V = vec3(ModelView * VertexPos4);" +
"		NV = normalize(V);" +
"		N = normalize(vec3(NormalMatrix * vec4(VertexNormal, 0.0)));" +
"	}~n" +

	'Calculate vertex lighting
"	if ( NumLights > 0 ) {" +
"		LightingResult lighting = CalcLighting(V, NV, N, vec3(1, 1, 1));" +
"		FCombinedDiffuse = lighting.Diffuse;" +
"		FCombinedSpecular = lighting.Specular;" +
"	}" +

	'Assign other varyings
"	FVertexColor = MaterialColor * VertexColor;" +
"	FVertexTexCoords = vec4(vec2(TextureMatrix * vec4(vec2(VertexTexCoords), 0, 1)), VertexTexCoords.z, VertexTexCoords.w);" +
"	if ( Fog.Data[2] != 0.0 ) FFogFactor = clamp((Fog.Data[1] - abs(V.z)) / (Fog.Data[1] - Fog.Data[0]), 0.0, 1.0);" +

	'Final position
"	gl_Position = ModelViewProjection * VertexPos4;" +
"}"

Const MinFragmentShader:String = StdFragmentVars +
"void main() {" +
	'First, if the fragment is in the fog completely, set it's color directly
"	if ( Fog.Data[2] != 0.0 && FFogFactor < 0.004 ) { gl_FragColor = vec4(Fog.Color, 1); return; }" +

	'Get color texture data
"	vec4 ColorTexture = UseColorTex ? texture2D(BaseTexSampler, vec2(FVertexTexCoords)) : vec4(1, 1, 1, 1);" +

	'Reject fragment with low alpha
"	if ( !SolidMode && (FVertexColor.a <= 0.004 || ColorTexture.a <= 0.004) ) discard;" +

	'Get other texture data
"	vec3 LightTexture = UseLightmap ? vec3(texture2D(LightmapSampler, vec2(FVertexTexCoords.z, FVertexTexCoords.w))) : vec3(0, 0, 0);" +

	'Lighting
"	vec4 LightingDiffuse = vec4(0, 0, 0, 1);" +
"	vec4 LightingSpecular = vec4(0, 0, 0, 0);" +
"	if ( NumLights > 0 ) {" +
"		LightingDiffuse = vec4(FCombinedDiffuse, 1);" +
"		LightingSpecular = vec4(FCombinedSpecular, 0);" +
"		LightingDiffuse += vec4(LightTexture, 0.0);" +
"	} else {"+
"		LightingDiffuse = UseLightmap ? vec4(LightTexture, 0.0) : vec4(1, 1, 1, 1);" +
"	}" +

	'Compute color
"	gl_FragColor = LightingDiffuse * FVertexColor * ColorTexture;" +

	'Add specular
"	if ( NumLights > 0 ) gl_FragColor = clamp(gl_FragColor + LightingSpecular, 0.0, 1.0);" +

	'Add fog
"	if ( Fog.Data[2] != 0.0 ) gl_FragColor = vec4(mix(Fog.Color, vec3(gl_FragColor), FFogFactor), gl_FragColor.a);" +
"}"

Const MinShadowsVertexShader:String = StdVertexVars + ShaderCalcLighting + 'ShaderCalcSkinning +
"void main() {" +
	'Get vec4 version of VertexPos
"	vec4 VertexPos4 = vec4(VertexPos, 1);" +

	'Vertex skinning
'"	if ( Skinned ) VertexPos4 = CalcSkinning(VertexPos4);" +

	'Calculate vectors used in lighting and fog calculations
"	vec3 V;" +
"	vec3 NV;" +
"	vec3 N;" +
"	if ( NumLights > 0 || Fog.Data[2] != 0.0 ) {" +
" 	V = vec3(ModelView * VertexPos4);" +
"		NV = normalize(V);" +
"		N = normalize(vec3(NormalMatrix * vec4(VertexNormal, 0.0)));" +
"	}~n" +

	'Calculate vertex lighting
"	if ( NumLights > 0 ) {" +
"		LightingResult lighting = CalcLighting(V, NV, N, vec3(1, 1, 1));" +
"		FCombinedDiffuse = lighting.Diffuse;" +
"		FCombinedSpecular = lighting.Specular;" +
"	}" +

	'Assign other varyings
"	FVertexColor = MaterialColor * VertexColor;" +
"	FVertexTexCoords = vec4(vec2(TextureMatrix * vec4(vec2(VertexTexCoords), 0, 1)), VertexTexCoords.z, VertexTexCoords.w);" +
"	if ( ShadowsEnabled ) FDepthCoords = vec3(DepthBiasMatrix * VertexPos4);" +
"	if ( Fog.Data[2] != 0.0 ) FFogFactor = clamp((Fog.Data[1] - abs(V.z)) / (Fog.Data[1] - Fog.Data[0]), 0.0, 1.0);" +

	'Final position
"	gl_Position = ModelViewProjection * VertexPos4;" +
"}"

Const MinShadowsFragmentShader:String = StdFragmentVars +
"void main() {" +
	'First, if the fragment is in the fog completely, set it's color directly
"	if ( Fog.Data[2] != 0.0 && FFogFactor < 0.004 ) { gl_FragColor = vec4(Fog.Color, 1); return; }" +

	'Get color texture data
"	vec4 ColorTexture = UseColorTex ? texture2D(BaseTexSampler, vec2(FVertexTexCoords)) : vec4(1, 1, 1, 1);" +

	'Reject fragment with low alpha
"	if ( !SolidMode && (FVertexColor.a <= 0.004 || ColorTexture.a <= 0.004) ) discard;" +

	'Get other texture data
"	vec3 LightTexture = UseLightmap ? vec3(texture2D(LightmapSampler, vec2(FVertexTexCoords.z, FVertexTexCoords.w))) : vec3(0, 0, 0);" +
"	float DepthTexture = texture2D(DepthSampler, vec2(FDepthCoords)).z;" +

	'Shadows
"	bool Shadowed = false;" +
"	if ( ShadowsEnabled && FDepthCoords.x >= 0.0 && FDepthCoords.x <= 1.0 && FDepthCoords.y >= 0.0 && FDepthCoords.y <= 1.0 && FDepthCoords.z >= 0.0 && FDepthCoords.z <= 1.0 && DepthTexture < FDepthCoords.z - DepthEpsilon ) Shadowed = true;" +

	'Lighting
"	vec4 LightingDiffuse = vec4(0, 0, 0, 1);" +
"	vec4 LightingSpecular = vec4(0, 0, 0, 0);" +
"	if ( NumLights > 0 ) {" +
		'Only apply if fragment is not shadowed
"		if ( !Shadowed ) { " +
"			LightingDiffuse = vec4(FCombinedDiffuse, 1);" +
"			LightingSpecular = vec4(FCombinedSpecular, 0);" +
"		} else {" +
"			LightingDiffuse = vec4(Ambient, 1);" +
"		}" +
"		LightingDiffuse += vec4(LightTexture, 0.0);" +
"	} else {"+
"		LightingDiffuse = UseLightmap ? vec4(LightTexture, 0.0) : vec4(1, 1, 1, 1);" +
"	}" +

	'Compute color
"	gl_FragColor = LightingDiffuse * FVertexColor * ColorTexture;" +

	'Add specular
"	if ( NumLights > 0 && !Shadowed ) gl_FragColor = clamp(gl_FragColor + LightingSpecular, 0.0, 1.0);" +

	'Add fog
"	if ( Fog.Data[2] != 0.0 ) gl_FragColor = vec4(mix(Fog.Color, vec3(gl_FragColor), FFogFactor), gl_FragColor.a);" +
"}"

Const VLitVertexShader:String = StdVertexVars + ShaderCalcLighting + ShaderCalcCubeCoords + 'ShaderCalcSkinning +
"void main() {" +
	'Get vec4 version of VertexPos
"	vec4 VertexPos4 = vec4(VertexPos, 1);" +

	'Vertex skinning
'"	if ( Skinned ) VertexPos4 = CalcSkinning(VertexPos4);" +

	'Calculate vectors used in lighting, env mapping and fog calculations
"	vec3 V;" +
"	vec3 NV;" +
"	vec3 N;" +
"	if ( NumLights > 0 || UseCubemap || Fog.Data[2] != 0.0 ) {" +
" 	V = vec3(ModelView * VertexPos4);" +
"		NV = normalize(V);" +
"		N = normalize(vec3(NormalMatrix * vec4(VertexNormal, 0.0)));" +
"	}~n" +

	'Cube mapping coordinates
"	if ( UseCubemap ) FCubeCoords = CalcCubeCoords(NV, N);" +

	'Calculate vertex lighting
"	if ( NumLights > 0 ) {" +
"		LightingResult lighting = CalcLighting(V, NV, N, vec3(1, 1, 1));" +
"		FCombinedDiffuse = lighting.Diffuse;" +
"		FCombinedSpecular = lighting.Specular;" +
"	}" +

	'Assign other varyings
"	FVertexColor = MaterialColor * VertexColor;" +
"	FVertexTexCoords = vec4(vec2(TextureMatrix * vec4(vec2(VertexTexCoords), 0, 1)), VertexTexCoords.z, VertexTexCoords.w);" +
"	if ( ShadowsEnabled ) FDepthCoords = vec3(DepthBiasMatrix * VertexPos4);" +
"	if ( Fog.Data[2] != 0.0 ) FFogFactor = clamp((Fog.Data[1] - abs(V.z)) / (Fog.Data[1] - Fog.Data[0]), 0.0, 1.0);" +

	'Final position
"	gl_Position = ModelViewProjection * VertexPos4;" +
"}"

Const VLitFragmentShader:String = StdFragmentVars +
"void main() {" +
	'First, if the fragment is in the fog completely, set it's color directly
"	if ( Fog.Data[2] != 0.0 && FFogFactor < 0.004 ) { gl_FragColor = vec4(Fog.Color, 1); return; }" +

	'Get color texture data
"	vec4 ColorTexture = UseColorTex ? texture2D(BaseTexSampler, vec2(FVertexTexCoords)) : vec4(1, 1, 1, 1);" +

	'Reject fragment with low alpha
"	if ( !SolidMode && (FVertexColor.a <= 0.004 || ColorTexture.a <= 0.004) ) discard;" +

	'Get other texture data
"	vec3 ShininessTexture = UseShininessTex ? vec3(texture2D(ShininessTexSampler, vec2(FVertexTexCoords))) : vec3(1, 1, 1);" +
"	vec3 LightTexture = UseLightmap ? vec3(texture2D(LightmapSampler, vec2(FVertexTexCoords.z, FVertexTexCoords.w))) : vec3(0, 0, 0);" +
"	vec4 CubeTexture = UseCubemap ? vec4(vec3(textureCube(CubemapSampler, FCubeCoords)), CubeOpacity) : vec4(0, 0, 0, 0);" +
"	float DepthTexture = texture2D(DepthSampler, vec2(FDepthCoords)).z;" +

	'Shadows
"	bool Shadowed = false;" +
"	if ( ShadowsEnabled && FDepthCoords.x >= 0.0 && FDepthCoords.x <= 1.0 && FDepthCoords.y >= 0.0 && FDepthCoords.y <= 1.0 && FDepthCoords.z >= 0.0 && FDepthCoords.z <= 1.0 && DepthTexture < FDepthCoords.z - DepthEpsilon ) Shadowed = true;" +

	'Lighting
"	vec4 LightingDiffuse = vec4(0, 0, 0, 1);" +
"	vec4 LightingSpecular = vec4(0, 0, 0, 0);" +
"	if ( NumLights > 0 ) {" +
		'Only apply if fragment is not shadowed
"		if ( !Shadowed ) { " +
"			LightingDiffuse = vec4(FCombinedDiffuse, 1);" +
"			LightingSpecular = vec4(FCombinedSpecular, 0);" +
"		} else {" +
"			LightingDiffuse = vec4(Ambient, 1);" +
"		}" +
"		LightingDiffuse += vec4(LightTexture, 0.0);" +
"	} else {"+
"		LightingDiffuse = UseLightmap ? vec4(LightTexture, 0.0) : vec4(1, 1, 1, 1);" +
"	}" +

	'Compute color
"	gl_FragColor = FVertexColor * ColorTexture;" +

	'Blend cubemap
"	gl_FragColor = vec4(vec3(CubeTexture)*CubeTexture.a + vec3(gl_FragColor)*(1.0 - CubeTexture.a), gl_FragColor.a);" +
'"	gl_FragColor = vec4(vec3(gl_FragColor) + vec3(CubeTexture)*CubeTexture.a, gl_FragColor.a);" +	'Additive mode

	'Combine diffuse
"	gl_FragColor *= LightingDiffuse;" +

	'Add specular
"	gl_FragColor = clamp(gl_FragColor + LightingSpecular, 0.0, 1.0);" +

	'Add fog
"	if ( Fog.Data[2] != 0.0 ) gl_FragColor = vec4(mix(Fog.Color, vec3(gl_FragColor), FFogFactor), gl_FragColor.a);" +
"}"

Const PLitVertexShader:String = StdVertexVars + ShaderCalcCubeCoords + ShaderCalcTbnMatrix + 'ShaderCalcSkinning +
"void main() {" +
	'Get vec4 version of VertexPos
"	vec4 VertexPos4 = vec4(VertexPos, 1);" +

	'Vertex skinning
'"	if ( Skinned ) VertexPos4 = CalcSkinning(VertexPos4);" +

	'Calculate vectors used in lighting, env mapping and fog calculations
"	vec3 V;" +
"	vec3 NV;" +
"	vec3 N;" +
"	if ( NumLights > 0 || UseNormalTex || UseShininessTex || UseCubemap || Fog.Data[2] != 0.0 ) {" +
" 	V = vec3(ModelView * VertexPos4);" +
"		NV = normalize(V);" +
"		N = normalize(vec3(NormalMatrix * vec4(VertexNormal, 0.0)));" +
"	}~n" +

	'Cube mapping coordinates
"	if ( UseCubemap ) FCubeCoords = CalcCubeCoords(NV, N);" +

	'Calculate TBN matrix
"	if ( NumLights > 0 && UseNormalTex ) FTBNMatrix = CalcTBNMatrix(N, normalize(vec3(NormalMatrix * vec4(VertexTangent, 0))));" +

	'Assign other varyings
"	if ( NumLights > 0 ) {" +
"		FVertexPos = V;" +
"		FNormalizedVertexPos = NV;" +
"		FVertexNormal = N;" +
"	}" +
"	FVertexColor = MaterialColor * VertexColor;" +
"	FVertexTexCoords = vec4(vec2(TextureMatrix * vec4(vec2(VertexTexCoords), 0, 1)), VertexTexCoords.z, VertexTexCoords.w);" +
"	if ( ShadowsEnabled ) FDepthCoords = vec3(DepthBiasMatrix * VertexPos4);" +
"	if ( Fog.Data[2] != 0.0 ) FFogFactor = clamp((Fog.Data[1] - abs(V.z)) / (Fog.Data[1] - Fog.Data[0]), 0.0, 1.0);" +

	'Final position
"	gl_Position = ModelViewProjection * VertexPos4;" +
"}"

Const PLitFragmentShader:String = StdFragmentVars + ShaderCalcLighting +
"void main() {" +
	'First, if the fragment is in the fog completely, set it's color directly
"	if ( Fog.Data[2] != 0.0 && FFogFactor < 0.004 ) { gl_FragColor = vec4(Fog.Color, 1); return; }" +

	'Get color texture data
"	vec4 ColorTexture = UseColorTex ? texture2D(BaseTexSampler, vec2(FVertexTexCoords)) : vec4(1, 1, 1, 1);" +

	'Reject fragment with low alpha
"	if ( !SolidMode && (FVertexColor.a <= 0.004 || ColorTexture.a <= 0.004) ) discard;" +

	'Get other texture data
"	vec3 ShininessTexture = UseShininessTex ? vec3(texture2D(ShininessTexSampler, vec2(FVertexTexCoords))) : vec3(1, 1, 1);" +
"	vec3 LightTexture = UseLightmap ? vec3(texture2D(LightmapSampler, vec2(FVertexTexCoords.z, FVertexTexCoords.w))) : vec3(0, 0, 0);" +
"	vec4 CubeTexture = UseCubemap ? vec4(vec3(textureCube(CubemapSampler, FCubeCoords)), CubeOpacity) : vec4(0, 0, 0, 0);" +
"	float DepthTexture = texture2D(DepthSampler, vec2(FDepthCoords)).z;" +

	'Shadows
"	bool Shadowed = false;" +
"	if ( ShadowsEnabled && FDepthCoords.x >= 0.0 && FDepthCoords.x <= 1.0 && FDepthCoords.y >= 0.0 && FDepthCoords.y <= 1.0 && FDepthCoords.z >= 0.0 && FDepthCoords.z <= 1.0 && DepthTexture < FDepthCoords.z - DepthEpsilon ) Shadowed = true;" +
'"	if ( FDepthCoords.x < 0.0 || FDepthCoords.x > 1.0 || FDepthCoords.y < 0.0 || FDepthCoords.y > 1.0 ) { gl_FragColor = vec4(1, 0, 1, 1); return; }" +
'"	if ( FDepthCoords.z < 0.0 || FDepthCoords.z > 1.0 ) { gl_FragColor = vec4(1, 1, 0, 1); return; }" +

	'Lighting
"	vec4 LightingDiffuse = vec4(0, 0, 0, 1);" +
"	vec4 LightingSpecular = vec4(0, 0, 0, 0);" +
"	if ( NumLights > 0 ) {" +
		'Only apply if fragment is not shadowed
"		if ( !Shadowed ) { " +
			'Get fragment normal or compute from normal map
"			vec3 normal = FVertexNormal;" +
"			if ( UseNormalTex ) {" +
"				vec3 normalTexColor = vec3(texture2D(NormalTexSampler, vec2(FVertexTexCoords)));" +
"				normal = FTBNMatrix * (normalTexColor*2.0 - 1.0);" +
"			} else {" +
"				normal = normalize(normal);" +
"			}" +

			'Calc lighting
"			LightingResult lighting = CalcLighting(FVertexPos, FNormalizedVertexPos, normal, ShininessTexture);" +
"			LightingDiffuse = vec4(lighting.Diffuse, 1);" +
"			LightingSpecular = vec4(lighting.Specular, 0);" +
"		} else {" +
"			LightingDiffuse = vec4(Ambient, 1);" +
"		}" +
"		LightingDiffuse += vec4(LightTexture, 0.0);" +
"	} else {"+
"		LightingDiffuse = UseLightmap ? vec4(LightTexture, 0.0) : vec4(1, 1, 1, 1);" +
"	}" +

	'Compute color
"	gl_FragColor = FVertexColor * ColorTexture;" +

	'Blend cubemap
"	gl_FragColor = vec4(vec3(CubeTexture)*CubeTexture.a + vec3(gl_FragColor)*(1.0 - CubeTexture.a), gl_FragColor.a);" +
'"	gl_FragColor = vec4(vec3(gl_FragColor) + vec3(CubeTexture)*CubeTexture.a, gl_FragColor.a);" +	'Additive mode

	'Combine diffuse
"	gl_FragColor *= LightingDiffuse;" +

	'Add specular
"	gl_FragColor = clamp(gl_FragColor + LightingSpecular, 0.0, 1.0);" +

	'Add fog
"	if ( Fog.Data[2] != 0.0 ) gl_FragColor = vec4(mix(Fog.Color, vec3(gl_FragColor), FFogFactor), gl_FragColor.a);" +
"}"

Const DefaultVertexShader:String = StdVertexVars + ShaderCalcLighting + ShaderCalcCubeCoords + ShaderCalcTbnMatrix + 'ShaderCalcSkinning +
"void main() {" +
	'Get vec4 version of VertexPos
"	vec4 VertexPos4 = vec4(VertexPos, 1);~n" +

	'Vertex skinning
"#ifdef SKINNING~n" +
"	VertexPos4 = CalcSkinning(VertexPos4);~n" +
"#endif~n" +

	'Calculate vectors used in lighting, env mapping and fog calculations
"	vec3 V;" +
"	vec3 NV;" +
"	vec3 N;" +
"#if defined(VERTEX_LIGHTING) || defined(FRAGMENT_LIGHTING) || defined(CUBE_MAPPING) || defined(FOG)~n" +
" 	V = vec3(ModelView * VertexPos4);" +
"		NV = normalize(V);" +
"		N = normalize(vec3(NormalMatrix * vec4(VertexNormal, 0.0)));~n" +
"#endif~n" +

	'Cube mapping coordinates
"#ifdef CUBE_MAPPING~n" +
"	FCubeCoords = CalcCubeCoords(NV, N);~n" +
"#endif~n" +

	'Calculate TBN matrix
"#ifdef FRAGMENT_LIGHTING~n" +
"	if ( UseNormalTex ) FTBNMatrix = CalcTBNMatrix(N, normalize(vec3(NormalMatrix * vec4(VertexTangent, 0))));~n" +
"#endif~n" +

	'Assign other varyings
"	if ( NumLights > 0 ) {" +
"		FVertexPos = V;" +
"		FNormalizedVertexPos = NV;" +
"		FVertexNormal = N;" +
"	}" +
"	FVertexColor = MaterialColor * VertexColor;" +
"	FVertexTexCoords = vec4(vec2(TextureMatrix * vec4(vec2(VertexTexCoords), 0, 1)), VertexTexCoords.z, VertexTexCoords.w);" +
"	if ( ShadowsEnabled ) FDepthCoords = vec3(DepthBiasMatrix * VertexPos4);" +
"	if ( Fog.Data[2] != 0.0 ) FFogFactor = clamp((Fog.Data[1] - abs(V.z)) / (Fog.Data[1] - Fog.Data[0]), 0.0, 1.0);" +

	'Final position
"	gl_Position = ModelViewProjection * VertexPos4;" +
"}"

Const DefaultFragmentShader:String = StdFragmentVars + ShaderCalcLighting +
"void main() {" +
	'First, if the fragment is in the fog completely, set it's color directly
"	if ( Fog.Data[2] != 0.0 && FFogFactor < 0.004 ) { gl_FragColor = vec4(Fog.Color, 1); return; }" +

	'Get color texture data
"	vec4 ColorTexture = UseColorTex ? texture2D(BaseTexSampler, vec2(FVertexTexCoords)) : vec4(1, 1, 1, 1);" +

	'Reject fragment with low alpha
"	if ( !SolidMode && (FVertexColor.a <= 0.004 || ColorTexture.a <= 0.004) ) discard;" +

	'Get other texture data
"	vec3 ShininessTexture = UseShininessTex ? vec3(texture2D(ShininessTexSampler, vec2(FVertexTexCoords))) : vec3(1, 1, 1);" +
"	vec3 LightTexture = UseLightmap ? vec3(texture2D(LightmapSampler, vec2(FVertexTexCoords.z, FVertexTexCoords.w))) : vec3(0, 0, 0);" +
"	vec4 CubeTexture = UseCubemap ? vec4(vec3(textureCube(CubemapSampler, FCubeCoords)), CubeOpacity) : vec4(0, 0, 0, 0);" +
"	float DepthTexture = texture2D(DepthSampler, vec2(FDepthCoords)).z;" +

	'Shadows
"	bool Shadowed = false;" +
"	if ( ShadowsEnabled && FDepthCoords.x >= 0.0 && FDepthCoords.x <= 1.0 && FDepthCoords.y >= 0.0 && FDepthCoords.y <= 1.0 && FDepthCoords.z >= 0.0 && FDepthCoords.z <= 1.0 && DepthTexture < FDepthCoords.z - DepthEpsilon ) Shadowed = true;" +
'"	if ( FDepthCoords.x < 0.0 || FDepthCoords.x > 1.0 || FDepthCoords.y < 0.0 || FDepthCoords.y > 1.0 ) { gl_FragColor = vec4(1, 0, 1, 1); return; }" +
'"	if ( FDepthCoords.z < 0.0 || FDepthCoords.z > 1.0 ) { gl_FragColor = vec4(1, 1, 0, 1); return; }" +

	'Lighting
"	vec4 LightingDiffuse = vec4(0, 0, 0, 1);" +
"	vec4 LightingSpecular = vec4(0, 0, 0, 0);" +
"	if ( NumLights > 0 ) {" +
		'Only apply if fragment is not shadowed
"		if ( !Shadowed ) { " +
			'Get fragment normal or compute from normal map
"			vec3 normal = FVertexNormal;" +
"			if ( UseNormalTex ) {" +
"				vec3 normalTexColor = vec3(texture2D(NormalTexSampler, vec2(FVertexTexCoords)));" +
"				normal = FTBNMatrix * (normalTexColor*2.0 - 1.0);" +
"			} else {" +
"				normal = normalize(normal);" +
"			}" +

			'Calc lighting
"			LightingResult lighting = CalcLighting(FVertexPos, FNormalizedVertexPos, normal, ShininessTexture);" +
"			LightingDiffuse = vec4(lighting.Diffuse, 1);" +
"			LightingSpecular = vec4(lighting.Specular, 0);" +
"		} else {" +
"			LightingDiffuse = vec4(Ambient, 1);" +
"		}" +
"		LightingDiffuse += vec4(LightTexture, 0.0);" +
"	} else {"+
"		LightingDiffuse = UseLightmap ? vec4(LightTexture, 0.0) : vec4(1, 1, 1, 1);" +
"	}" +

	'Compute color
"	gl_FragColor = FVertexColor * ColorTexture;" +

	'Blend cubemap
"	gl_FragColor = vec4(vec3(CubeTexture)*CubeTexture.a + vec3(gl_FragColor)*(1.0 - CubeTexture.a), gl_FragColor.a);" +
'"	gl_FragColor = vec4(vec3(gl_FragColor) + vec3(CubeTexture)*CubeTexture.a, gl_FragColor.a);" +	'Additive mode

	'Combine diffuse
"	gl_FragColor *= LightingDiffuse;" +

	'Add specular
"	gl_FragColor = clamp(gl_FragColor + LightingSpecular, 0.0, 1.0);" +

	'Add fog
"	if ( Fog.Data[2] != 0.0 ) gl_FragColor = vec4(mix(Fog.Color, vec3(gl_FragColor), FFogFactor), gl_FragColor.a);" +
"}"

Const ShadowVertexShader:String = "" +
"uniform mat4 ModelViewProjection;" +
"attribute vec3 VertexPos;" +
'"varying float depth;" +
"void main() {" +
"	gl_Position = ModelViewProjection * vec4(VertexPos, 1);" +
'"	depth = gl_Position.z / gl_Position.w;" +
"}"

Const ShadowFragmentShader:String = "" +
'"varying float depth;" +
"void main() {" +
"	float depth = gl_FragCoord.z / gl_FragCoord.w;" +
"	gl_FragColor = vec4(depth, depth, depth, 1);" +
"}"

Const _2DVertexShader:String = "" +
"uniform mat4 ModelViewProjection;" +
"uniform mat4 TextureMatrix;" +
"attribute vec3 VertexPos;" +
"attribute vec4 VertexTexCoords;" +
"varying vec2 FVertexTexCoords;" +
"void main() {" +
"	gl_Position = ModelViewProjection * vec4(VertexPos, 1.0);" +
"	FVertexTexCoords = vec2(TextureMatrix * vec4(vec2(VertexTexCoords), 0, 1));" +
"}"

Const _2DFragmentShader:String = "" +
"uniform bool UseColorTex;" +
"uniform bool UseCubemap;" +
"uniform sampler2D BaseTexSampler;" +
"uniform samplerCube CubemapSampler;" +
"uniform vec4 MaterialColor;" +
"varying vec2 FVertexTexCoords;" +
"void main() {" +
"	gl_FragColor = MaterialColor;" +
"	if ( UseColorTex ) gl_FragColor *= texture2D(BaseTexSampler, FVertexTexCoords);" +
"	if ( UseCubemap ) gl_FragColor *= textureCube(CubemapSampler, vec3(FVertexTexCoords.x, -FVertexTexCoords.y, 1));" +
"}"

Const SkyboxVertexShader:String = "" +
"uniform mat4 ModelViewProjection;" +
"uniform mat4 ModelView;" +
"uniform mat4 InverseView;" +
"attribute vec3 VertexPos;" +
"varying vec3 FCubeCoords;" +
"void main() {" +
"	gl_Position = ModelViewProjection * vec4(VertexPos, 1);" +
"	FCubeCoords = vec3(InverseView * vec4(normalize(vec3(ModelView * vec4(VertexPos, 1))), 0));" +
"}"

Const SkyboxFragmentShader:String = "" +
"uniform samplerCube CubemapSampler;" +
"varying vec3 FCubeCoords;" +
"void main() { gl_FragColor = textureCube(CubemapSampler, FCubeCoords); }"