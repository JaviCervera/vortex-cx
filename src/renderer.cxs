#OPENGL_DEPTH_BUFFER_ENABLED=True

Strict

Private

Import brl.databuffer
Import color
Import math3d
Import mojo.app
Import mojo.graphics
Import opengl.gles20
Import renderstate
Import shader

'#If TARGET="html5"
Const GlslVersion : String = ""
'#Else
'Const GlslVersion:String = "#version 120~n"
'#EndIf

Public

Class Renderer
Public
	Const BlendSolid:Int = 0
	Const BlendAlpha:Int = 1
	Const BlendAdd:Int = 2
	Const BlendMul:Int = 3
	
	Const FilterNone:Int = 0
	Const FilterLinear:Int = 1
	Const FilterBilinear:Int = 2
	Const FilterTrilinear:Int = 3
	
	'Const TextureDisabled:Int = 0
	'Const Texture2D:Int = 1
	
	Const ModePoints					: Int = 0
	Const ModeLines					: Int = 1
	Const ModeTriangles			: Int = 2
	Const ModeTriangleStrip	: Int = 3
	Const ModeTriangleFan		: Int = 4
	
	Const BaseTexUnit:Int = 0
	Const NormalTexUnit:Int = 1
	Const ShininessTexUnit:Int = 2
	Const LightmapUnit:Int = 3
	Const CubemapUnit:Int = 4
	Const DepthTexUnit:Int = 5
	
	Const EllipsePoints:Int = 64

	'---------------------------------------------------------------------------
	'Setup
	'---------------------------------------------------------------------------

	Function Init:Bool(numLights:Int, numBones:Int)
		'Setup render state
		RenderState.LightPos = New Float[numLights][]
		For Local i:Int = 0 Until numLights
			RenderState.LightPos[i] = [0.0, 0.0, 0.0, 0.0]
		Next
		RenderState.LightColor = New Int[numLights]
		RenderState.LightRadius = New Float[numLights]
		RenderState.Color = color.Color.White
	
		'Set the max number of lights and bones supported
		mMaxLights = numLights
		mMaxBones = numBones
		
		'Compile all shaders
		Shader._Default2D()
		Shader._Shadow()
		Shader._Skybox()
		Shader._Minimal()
		Shader._MinimalShadows()
		Shader._VertexLighting()
		Shader._PixelLighting()

		'Make sure that at least 2d, skybox and minimal shaders are correct
		If Shader._Default2D().Handle = 0 Then Return False
		If Shader._Skybox().Handle = 0 Then Return False
		If Shader._Minimal().Handle = 0 Then Return False
		
		'Delete old buffers if they exist
		If mEllipseBuffer <> 0 Then FreeBuffer(mEllipseBuffer)
		If mLineBuffer <> 0 Then FreeBuffer(mLineBuffer)
		If mRectBuffer <> 0 Then FreeBuffer(mRectBuffer)

		'Create ellipse buffer
		Local dataBuffer:DataBuffer = New DataBuffer(EllipsePoints*12, True)
		Local inc:Float = 360.0 / EllipsePoints
		For Local i:Int = 0 Until EllipsePoints
			Local x:Float = 0.5 + 0.5 * Cos(i * inc)
			Local y:Float = 0.5 + 0.5 * Sin(i * inc)
			dataBuffer.PokeFloat(i*12, x)
			dataBuffer.PokeFloat(i*12 + 4, y)
			dataBuffer.PokeFloat(i*12 + 8, 0)
		Next
		mEllipseBuffer = CreateVertexBuffer(dataBuffer.Length)
		SetVertexBufferData(mEllipseBuffer, 0, dataBuffer.Length, dataBuffer)
		dataBuffer.Discard()
		
		'Create line buffer
		dataBuffer = New DataBuffer(24, True)
		dataBuffer.PokeFloat(0, 0)
		dataBuffer.PokeFloat(4, 0)
		dataBuffer.PokeFloat(8, 0)
		dataBuffer.PokeFloat(12, 1)
		dataBuffer.PokeFloat(16, 1)
		dataBuffer.PokeFloat(20, 0)
		mLineBuffer = CreateVertexBuffer(dataBuffer.Length)
		SetVertexBufferData(mLineBuffer, 0, dataBuffer.Length, dataBuffer)
		dataBuffer.Discard()
		
		'Create rect buffer
		dataBuffer = New DataBuffer(112, True)
		dataBuffer.PokeFloat(0, 0)
		dataBuffer.PokeFloat(4, 0)
		dataBuffer.PokeFloat(8, 0)
		dataBuffer.PokeFloat(12, 1)
		dataBuffer.PokeFloat(16, 0)
		dataBuffer.PokeFloat(20, 0)
		dataBuffer.PokeFloat(24, 1)
		dataBuffer.PokeFloat(28, 1)
		dataBuffer.PokeFloat(32, 0)
		dataBuffer.PokeFloat(36, 0)
		dataBuffer.PokeFloat(40, 1)
		dataBuffer.PokeFloat(44, 0)
		mRectBuffer = CreateVertexBuffer(dataBuffer.Length)
		SetVertexBufferData(mRectBuffer, 0, dataBuffer.Length, dataBuffer)
		dataBuffer.Discard()
		
		'Default framebuffer height
		mFramebufferHeight = DeviceHeight()
		
		'3D is default
		Setup3D(0, 0, DeviceWidth(), DeviceHeight())

		Return True
	End

	Function Setup2D:Void(x:Int, y:Int, w:Int, h:Int)
		Local fbHeight:Int = mFramebufferHeight
		If fbHeight = 0 Then fbHeight = DeviceHeight()

		'Disable 3D states
		SetCulling(False)
		glDisable(GL_DEPTH_TEST)

		'Setup 2D
		glEnable(GL_BLEND)
		glEnable(GL_SCISSOR_TEST)
		glFrontFace(GL_CW)
		BlendMode(BlendAlpha)
		Color(color.Color.White)
		SetTextures(0, 0, 0, 0, 0)

		'Setup viewport
		y = fbHeight - y - h
		glViewport(x, y, w, h)
		glScissor(x, y, w, h)

		'Setup matrices
		Mat4OrthoLH(0, w, h, 0, 0, 100, RenderState.ProjectionMatrix)
		Mat4Identity(RenderState.ViewMatrix)
		Mat4Identity(RenderState.ModelMatrix)
		Mat4Identity(RenderState.TextureMatrix)
		
		'Bind 2D shader
		Shader._CurrentDefault(Shader._Default2D())
	End

	Function Setup3D:Void(x:Int, y:Int, w:Int, h:Int)
		Local fbHeight:Int = mFramebufferHeight
		If fbHeight = 0 Then fbHeight = DeviceHeight()

		'Setup 3D
		glEnable(GL_BLEND)
		glEnable(GL_DEPTH_TEST)
		glEnable(GL_SCISSOR_TEST)
		glDepthFunc(GL_LEQUAL)
		RenderState.NumLights = 0
		SetCulling(True)
		glFrontFace(GL_CW)
		SetDepthWrite(True)
		BlendMode(BlendSolid)
		Color(color.Color.White)
		SetTextures(0, 0, 0, 0, 0)
		RenderState.Skinned = False

		'Setup viewport
		y = fbHeight - y - h
		glViewport(x, y, w, h)
		glScissor(x, y, w, h)
		
		'Setup texture matrix
		Mat4Identity(RenderState.TextureMatrix)
		
		'Disable shadows by default
		RenderState.ShadowsEnabled = False
		
		'Bind 3D shader
		Shader._CurrentDefault(Shader._Default3D())
	End
	
	Function SetupMojo:Void()
		If mMojoVertexBuffer = 0 Or mMojoIndexBuffer = 0
			Local val:Int[1]
			glGetIntegerv(GL_ARRAY_BUFFER_BINDING, val)
			mMojoVertexBuffer = val[0]
			glGetIntegerv(GL_ELEMENT_ARRAY_BUFFER_BINDING, val)
			mMojoIndexBuffer = val[0]
		End
	
		'Disable 3D states
		SetCulling(False)
		glDisable(GL_DEPTH_TEST)

		'Setup 2D
		glEnable(GL_BLEND)
		glEnable(GL_SCISSOR_TEST)
		glFrontFace(GL_CCW)
		BlendMode(BlendAlpha)
		Color(color.Color.White)
		
		'Bind Mojo buffers
		glBindBuffer(GL_ARRAY_BUFFER, mMojoVertexBuffer)
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, mMojoIndexBuffer)
		
		'This is a bit hacky... taken from Mojo2 source
		glEnableVertexAttribArray 0 ; glVertexAttribPointer 0,2,GL_FLOAT,False,28,0
		glEnableVertexAttribArray 1 ; glVertexAttribPointer 1,2,GL_FLOAT,False,28,8
		glEnableVertexAttribArray 2 ; glVertexAttribPointer 2,2,GL_FLOAT,False,28,16
		glEnableVertexAttribArray 3 ; glVertexAttribPointer 3,4,GL_UNSIGNED_BYTE,True,28,24
	End
	
	Function MaxBones:Int()
		Return mMaxBones
	End

	Function BlendMode:Void(mode:Int)
		RenderState.BlendMode = mode
		Select mode
		Case BlendSolid
			glBlendFunc(GL_ONE, GL_ZERO)
		Case BlendAlpha
			glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
		Case BlendAdd
			glBlendFunc(GL_SRC_ALPHA, GL_ONE)
		Case BlendMul
			glBlendFunc(GL_DST_COLOR, GL_ZERO)
		End
	End
	
	Function Color:Void(color:Int)
		RenderState.Color = color
	End

	Function SetCulling:Void(enable:Bool)
		If enable Then glEnable(GL_CULL_FACE) Else glDisable(GL_CULL_FACE)
	End

	Function SetDepthWrite:Void(enable:Bool)
		glDepthMask(enable)
	End
	
	Function MaxLights:Int()
		Return mMaxLights
	End

	'---------------------------------------------------------------------------
	' Drawing
	'---------------------------------------------------------------------------

	Function ClearColorBuffer:Void(col:Int = color.Color.Black)
		glClearColor(color.Color.R(col) / 255.0, color.Color.G(col) / 255.0, color.Color.B(col) / 255.0, color.Color.A(col) / 255.0)
		glClear(GL_COLOR_BUFFER_BIT)
	End

	Function ClearDepthBuffer:Void()
		glClear(GL_DEPTH_BUFFER_BIT)
	End

	Function DrawPoint:Void(x:Float, y:Float)
#If TARGET<>"html5"
		Mat4TransformEuler(x, y, 0, 0, 0, 0, 1, 1, 1, RenderState.ModelMatrix)
		Shader._CurrentDefault()._Prepare()
		DrawBuffers(mLineBuffer, 0, 1, 0, -1, -1, -1, -1, -1, -1, 0, ModePoints)
#Else
		'Drawing points do not seem to work on HTML5, so emulate it with a line instead
		DrawLine(x-0.5, y-0.5, x+0.5, y+0.5)
#End
	End

	Function DrawLine:Void(x1:Float, y1:Float, x2:Float, y2:Float)
		Mat4TransformEuler(x1, y1, 0, 0, 0, 0, x2-x1, y2-y1, 1, RenderState.ModelMatrix)
		Shader._CurrentDefault()._Prepare()
		DrawBuffers(mLineBuffer, 0, 2, 0, -1, -1, -1, -1, -1, -1, 0, ModeLines)
	End
	
	Function DrawEllipse:Void(x:Float, y:Float, width:Float, height:Float)
		Mat4TransformEuler(x, y, 0, 0, 0, 0, width, height, 1, RenderState.ModelMatrix)
		Shader._CurrentDefault()._Prepare()
		DrawBuffers(mEllipseBuffer, 0, EllipsePoints, 0, -1, -1, -1, -1, -1, -1, 0, ModeTriangleFan)
	End

	Function DrawRect:Void(x:Float, y:Float, width:Float, height:Float)
		Mat4TransformEuler(x, y, 0, 0, 0, 0, width, height, 1, RenderState.ModelMatrix)
		Shader._CurrentDefault()._Prepare()
		DrawBuffers(mRectBuffer, 0, 4, 0, -1, -1, -1, -1, -1, -1, 0, ModeTriangleFan)
	End
	
	Function DrawRectEx:Void(x:Float, y:Float, width:Float, height:Float, u0:Float, v0:Float, u1:Float, v1:Float)
		mTexDataBuffer.PokeFloat(0, u0)
		mTexDataBuffer.PokeFloat(4, v0)
		mTexDataBuffer.PokeFloat(16, u1)
		mTexDataBuffer.PokeFloat(20, v0)
		mTexDataBuffer.PokeFloat(32, u1)
		mTexDataBuffer.PokeFloat(36, v1)
		mTexDataBuffer.PokeFloat(48, u0)
		mTexDataBuffer.PokeFloat(52, v1)
		SetVertexBufferData(mRectBuffer, 48, mTexDataBuffer.Length(), mTexDataBuffer)
		Mat4TransformEuler(x, y, 0, 0, 0, 0, width, height, 1, RenderState.ModelMatrix)
		Shader._CurrentDefault()._Prepare()
		DrawBuffers(mRectBuffer, 0, 4, 0, -1, -1, -1, 48, -1, -1, 0, ModeTriangleFan)
	End

	'---------------------------------------------------------------------------
	' Texture
	'---------------------------------------------------------------------------
	
	Function CreateTexture:Int(width:Int, height:Int)
		Local texture:Int = glCreateTexture()
		glBindTexture(GL_TEXTURE_2D, texture)
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
		'glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE)
		'glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE)
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, Null)
		'glBindTexture(GL_TEXTURE_2D, 0)
		Return texture
	End
	
	Function CreateTexture:Int(buffer:DataBuffer, width:Int, height:Int, filter:Int)
		Local texture:Int = glCreateTexture()
		SetTexturePixels(texture, buffer, width, height, filter)
		Return texture
	End

	Function LoadTexture:Int(filename:String, size:Int[], filter:Int)
		'Trick to get texture size
		If size.Length >= 2
			Local img:Image = LoadImage(filename)
			If img <> Null
				size[0] = img.Width()
				size[1] = img.Height()
				img.Discard()
			Else
				size[0] = 0
				size[1] = 0
				Return 0
			End
		End
		
		'Fix filename
		If String.FromChar(filename[0]) <> "/" And String.FromChar(filename[1]) <> ":" Then filename = "cerberus://data/" + filename
		
		Local texture:Int = glCreateTexture()
		glBindTexture(GL_TEXTURE_2D, texture)
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, MagFilter(filter))
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, MinFilter(filter))
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE, filename)
'#If TARGET<>"html5"
		If filter > FilterLinear Then glGenerateMipmap(GL_TEXTURE_2D)
'#EndIf
		'glBindTexture(GL_TEXTURE_2D, 0)

		Return texture
	End
	
	Function LoadCubicTexture:Int(left:String, right:String, front:String, back:String, top:String, bottom:String, size:Int[], filter:Int)
		'Trick to get texture size
		If size.Length >= 2
			Local img:Image = LoadImage(left)
			If img <> Null
				size[0] = img.Width()
				size[1] = img.Height()
				img.Discard()
			Else
				size[0] = 0
				size[1] = 0
				Return 0
			End
		End
		
		'Fix filenames
		If String.FromChar(left[0]) <> "/" And String.FromChar(left[1]) <> ":" Then left = "cerberus://data/" + left
		If String.FromChar(right[0]) <> "/" And String.FromChar(right[1]) <> ":" Then right = "cerberus://data/" + right
		If String.FromChar(front[0]) <> "/" And String.FromChar(front[1]) <> ":" Then front = "cerberus://data/" + front
		If String.FromChar(back[0]) <> "/" And String.FromChar(back[1]) <> ":" Then back = "cerberus://data/" + back
		If String.FromChar(top[0]) <> "/" And String.FromChar(top[1]) <> ":" Then top = "cerberus://data/" + top
		If String.FromChar(bottom[0]) <> "/" And String.FromChar(bottom[1]) <> ":" Then bottom = "cerberus://data/" + bottom
		
		Local texture:Int = glCreateTexture()
		glBindTexture(GL_TEXTURE_CUBE_MAP, texture)
		glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE)
		glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE)
		glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, MagFilter(filter))
		glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, MinFilter(filter, True))
		glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_X, 0, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE, left)
		glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE, right)
		glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE, back)
		glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Z, 0, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE, front)
		glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Y, 0, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE, top)
		glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE, bottom)
'#If TARGET<>"html5"
		If filter > FilterLinear Then glGenerateMipmap(GL_TEXTURE_CUBE_MAP)
'#Endif
		'glBindTexture(GL_TEXTURE_2D, 0)

		Return texture
	End

	Function FreeTexture:Void(texture:Int)
		glDeleteTexture(texture)
	End

	Function SetTextures:Void(diffuseTex:Int, normalTex:Int, shininessTex:Int, lightmap:Int, cubeTex:Int)
		glActiveTexture(GL_TEXTURE0 + BaseTexUnit)
		glBindTexture(GL_TEXTURE_2D, diffuseTex)
		glActiveTexture(GL_TEXTURE0 + NormalTexUnit)
		glBindTexture(GL_TEXTURE_2D, normalTex)
		glActiveTexture(GL_TEXTURE0 + ShininessTexUnit)
		glBindTexture(GL_TEXTURE_2D, shininessTex)
		glActiveTexture(GL_TEXTURE0 + LightmapUnit)
		glBindTexture(GL_TEXTURE_2D, lightmap)
		glActiveTexture(GL_TEXTURE0 + CubemapUnit)
		glBindTexture(GL_TEXTURE_CUBE_MAP, cubeTex)
		glActiveTexture(GL_TEXTURE0)
		
		RenderState.UseColorTex = diffuseTex <> 0
		RenderState.UseNormalTex = normalTex <> 0
		RenderState.UseShininessTex = shininessTex <> 0
		RenderState.UseLightTex = lightmap <> 0
		RenderState.UseCubeTex = cubeTex <> 0
	End
	
	Function SetDepthTexture:Void(depthTex:Int)
		If depthTex <> 0
			glActiveTexture(GL_TEXTURE0 + DepthTexUnit)
			glBindTexture(GL_TEXTURE_2D, depthTex)
			glActiveTexture(GL_TEXTURE0)
		End
	End
	
	Function SetTexturePixels:Void(texture:Int, pixels:DataBuffer, width:Int, height:Int, filter:Int)
		glBindTexture(GL_TEXTURE_2D, texture)
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER, MagFilter(filter))
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER, MinFilter(filter))
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, pixels)
		If filter > FilterLinear Then glGenerateMipmap(GL_TEXTURE_2D)
	End
	
	'---------------------------------------------------------------------------
	' Framebuffer
	'---------------------------------------------------------------------------
	
	Function CreateFramebuffer:Int(colorTex:Int, depthBuffer:Int)
#If TARGET <> "ios"
		Local fb:Int = glCreateFramebuffer()
		SetFramebuffer(fb, mFramebufferHeight)
		glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, colorTex, 0)
		If depthBuffer <> 0 Then glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, depthBuffer)
		SetFramebuffer(0, mFramebufferHeight)
		Return fb
#Else
		Return 0
#Endif
	End
	
	Function FreeFramebuffer:Void(fb:Int)
#If TARGET <> "ios"
		glDeleteFramebuffer(fb)
#Endif
	End
	
	Function SetFramebuffer:Void(fb:Int, height:Int)
#If TARGET <> "ios"
		glBindFramebuffer(GL_FRAMEBUFFER, fb)
		If fb <> 0 Then mFramebufferHeight = height Else mFramebufferHeight = 0
#EndIf
	End
	
	'---------------------------------------------------------------------------
	'	Renderbuffer
	'---------------------------------------------------------------------------
	
	Function CreateRenderbuffer:Int(width:Int, height:Int)
		Local rb:Int = glCreateRenderbuffer()
		glBindRenderbuffer(GL_RENDERBUFFER, rb)
		glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16, width, height)
		glBindRenderbuffer(GL_RENDERBUFFER, 0)
		Return rb
	End
	
	Function FreeRenderbuffer:Void(rb:Int)
		glDeleteRenderbuffer(rb)
	End

	'---------------------------------------------------------------------------
	' VBO
	'---------------------------------------------------------------------------

	Function CreateVertexBuffer:Int(size:Int)
		Local buffer:Int = glCreateBuffer()
		If size > 0 Then ResizeVertexBuffer(buffer, size)
		Return buffer
	End
	
	Function CreateIndexBuffer:Int(size:Int)
		Local buffer:Int = glCreateBuffer()
		If size > 0 Then ResizeIndexBuffer(buffer, size)
		Return buffer
	End

	Function FreeBuffer:Void(buffer:Int)
		glDeleteBuffer(buffer)
	End
	
	Function ResizeVertexBuffer:Void(buffer:Int, size:Int)
		glBindBuffer(GL_ARRAY_BUFFER, buffer)
		glBufferData(GL_ARRAY_BUFFER, size, Null, GL_STATIC_DRAW)
		glBindBuffer(GL_ARRAY_BUFFER, 0)
	End
	
	Function ResizeIndexBuffer:Void(buffer:Int, size:Int)
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, buffer)
		glBufferData(GL_ELEMENT_ARRAY_BUFFER, size, Null, GL_STATIC_DRAW)
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0)
	End

	Function SetVertexBufferData:Void(buffer:Int, offset:Int, size:Int, data:DataBuffer)
		glBindBuffer(GL_ARRAY_BUFFER, buffer)
		glBufferSubData(GL_ARRAY_BUFFER, offset, size, data)
		glBindBuffer(GL_ARRAY_BUFFER, 0)
	End

	Function SetIndexBufferData:Void(buffer:Int, offset:Int, size:Int, data:DataBuffer)
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, buffer)
		glBufferSubData(GL_ELEMENT_ARRAY_BUFFER, offset, size, data)
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0)
	End

	Function DrawBuffers:Void(vertexBuffer:Int, indexBuffer:Int, numIndices:Int, coordsOffset:Int, normalsOffset:Int, tangentsOffset:Int, colorsOffset:Int, texCoordsOffset:Int, boneIndicesOffset:Int, boneWeightsOffset:Int, stride:Int, mode:Int = ModeTriangles)
		Local glMode:Int = GL_TRIANGLES
		Select mode
		Case ModePoints
			glMode = GL_POINTS
		Case ModeLines
			glMode = GL_LINES
		Case ModeTriangles
			glMode = GL_TRIANGLES
		Case ModeTriangleStrip
			glMode = GL_TRIANGLE_STRIP
		Case ModeTriangleFan
			glMode = GL_TRIANGLE_FAN
		End
		
		'Get currently bound buffers
		glGetIntegerv(GL_ARRAY_BUFFER_BINDING, mTempArray)
		Local prevVertexBuffer:Int = mTempArray[0]
		glGetIntegerv(GL_ELEMENT_ARRAY_BUFFER_BINDING, mTempArray)
		Local prevIndexBuffer:Int = mTempArray[0]
		
		'Bind buffers and enable vertex vars
		glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer)
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBuffer)
		Shader._CurrentDefault()._EnableVertexVars(coordsOffset, normalsOffset, tangentsOffset, colorsOffset, texCoordsOffset, boneIndicesOffset, boneWeightsOffset, stride)

		'Draw
		If indexBuffer <> 0
			glDrawElements(glMode, numIndices, GL_UNSIGNED_SHORT, 0)
		Else
			glDrawArrays(glMode, 0, numIndices)
		End
		
		'Disable vertex vars
		Shader._CurrentDefault()._DisableVertexVars()
		
		'Bind previously bound buffers (in case they are the Mojo2 ones)
		glBindBuffer(GL_ARRAY_BUFFER, prevVertexBuffer)
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, prevIndexBuffer)
	End

	'---------------------------------------------------------------------------
	' Shaders
	'---------------------------------------------------------------------------
	
	Function CreateShader:Int(vertex:String, fragment:String)
		Local retCode:Int[1]

		'Create vertex shader
		Local vshader:Int = glCreateShader(GL_VERTEX_SHADER)
		glShaderSource(vshader, vertex)
		glCompileShader(vshader)
		mShaderError = glGetShaderInfoLog(vshader)
		glGetShaderiv(vshader, GL_COMPILE_STATUS, retCode)
		If retCode[0] = GL_FALSE
			glDeleteShader(vshader)
			Return 0
		End

		'Create fragment shader
		Local fshader:Int = glCreateShader(GL_FRAGMENT_SHADER)
		glShaderSource(fshader, fragment)
		glCompileShader(fshader)
		mShaderError += "~n" + glGetShaderInfoLog(fshader)
		glGetShaderiv(fshader, GL_COMPILE_STATUS, retCode)
		If retCode[0] = GL_FALSE
			glDeleteShader(vshader)
			glDeleteShader(fshader)
			Return 0
		End

		'Create program
		Local program:Int = glCreateProgram()
		glAttachShader(program, vshader)
		glAttachShader(program, fshader)
		glLinkProgram(program)
		glDeleteShader(vshader)
		glDeleteShader(fshader)
		glGetProgramiv(program, GL_LINK_STATUS, retCode)
		If retCode[0] = GL_FALSE
			mShaderError = glGetProgramInfoLog(program)
			FreeShader(program)
			Return 0
		End
		
		Return program
	End

	Function FreeShader:Void(shader:Int)
		glDeleteProgram(shader)
	End
	
	Function UseShader:Void(shader:Int)
		glUseProgram(shader)
	End
	
	Function ShaderLocation:Int(shader:Int, name:String)
		Return glGetUniformLocation(shader, name)
	End
	
	Function ShaderAttribLocation:Int(shader:Int, name:String)
		Return glGetAttribLocation(shader, name)
	End
	
	Function ShaderEnableAttrib:Void(loc:Int, size:Int, stride:Int, offset:Int)
		If loc = -1 Then Return
		glEnableVertexAttribArray(loc)
		glVertexAttribPointer(loc, size, GL_FLOAT, False, stride, offset)
	End
	
	Function ShaderDisableAttrib:Void(loc:Int)
		If loc = -1 Then Return
		glDisableVertexAttribArray(loc)
	End
	
	Function SetShaderInt:Void(loc:Int, x:Int)
		If loc <> -1 Then glUniform1i(loc, x)
	End
	
	Function SetShaderFloat:Void(loc:Int, x:Float)
		If loc <> -1 Then glUniform1f(loc, x)
	End
	
	Function SetShaderVec2:Void(loc:Int, x:Float, y:Float)
		If loc <> -1 Then glUniform2f(loc, x, y)
	End
	
	Function SetShaderVec3:Void(loc:Int, x:Float, y:Float, z:Float)
		If loc <> -1 Then glUniform3f(loc, x, y, z)
	End
	
	Function SetShaderVec4:Void(loc:Int, x:Float, y:Float, z:Float, w:Float)
		If loc <> -1 Then glUniform4f(loc, x, y, z, w)
	End
	
	Function SetShaderMat4:Void(loc:Int, m:Float[])
		If loc <> -1 Then glUniformMatrix4fv(loc, 1, False, m)
	End

	Function ShaderError:String()
		Return mShaderError
	End
	
	Function VendorName:String()
		Return glGetString(GL_VENDOR)
	End
	
	Function RendererName:String()
		Return glGetString(GL_RENDERER)
	End
	
	Function APIVersionName:String()
		Return glGetString(GL_VERSION)
	End
	
	Function ShadingVersionName:String()
		Return glGetString(GL_SHADING_LANGUAGE_VERSION)
	End

	Function APIVersion:Float()
		If mVersion = 0
			Local glVersionStr:String[] = glGetString(GL_VERSION).Split(" ")
			For Local v:String = Eachin glVersionStr
				If v[0] >= 48 And v[0] <= 57
					mVersion = Float(v)
					Exit
				End
			Next
		End
		Return mVersion
	End Function

	Function ShadingVersion:Float()
		If mShadingVersion = 0
			Local glslVersionStr:String[] = glGetString(GL_SHADING_LANGUAGE_VERSION).Split(" ")
			For Local v:String = Eachin glslVersionStr
				If v[0] >= 48 And v[0] <= 57
					mShadingVersion = Float(v)
					Exit
				End
			Next
		End
		Return mShadingVersion
	End Function
	
	Function ErrorString:String()
		Local err:Int = glGetError()
		Select err
		Case GL_NO_ERROR
			Return "No error"
		Case GL_INVALID_ENUM
			Return "Invalid enum"
		Case GL_INVALID_VALUE
			Return "Invalid value"
		Case GL_INVALID_OPERATION
			Return "Invalid operation"
		Case GL_INVALID_FRAMEBUFFER_OPERATION
			Return "Invalid framebuffer operation"
		Case GL_OUT_OF_MEMORY
			Return "Out of memory"
		Default
			Return ""
		End
	End
	
	Function MaxTextureSize:Int()
		glGetIntegerv(GL_MAX_TEXTURE_SIZE, mTempArray)
		Return mTempArray[0]
	End
Private
	Method New()
	End

	Function MagFilter:Int(filtering:Int)
		Select filtering
		Case FilterNone
			Return GL_NEAREST
		Case FilterLinear
			Return GL_LINEAR
		Case FilterBilinear
			Return GL_LINEAR
		Case FilterTrilinear
			Return GL_LINEAR
		Default
			Return GL_LINEAR
		End
	End

	Function MinFilter:Int(filtering:Int, isCubeMap:Bool = False)
		Select filtering
		Case FilterNone
			Return GL_NEAREST
		Case FilterLinear
			Return GL_LINEAR
#If TARGET<>"html5"
		Case FilterBilinear
			Return GL_LINEAR_MIPMAP_NEAREST
		Case FilterTrilinear
			Return GL_LINEAR_MIPMAP_LINEAR
#Else
		Case FilterBilinear
			If Not isCubeMap Then Return GL_LINEAR_MIPMAP_NEAREST Else Return GL_LINEAR
		Case FilterTrilinear
			If Not isCubeMap Then Return GL_LINEAR_MIPMAP_LINEAR Else Return GL_LINEAR
#End
		Default
			Return GL_LINEAR
		End
	End
	
	Global mMaxLights	: Int
	Global mMaxBones	: Int

	'Info
	Global mVersion:Float
	Global mShadingVersion:Float
	Global mMojoVertexBuffer:Int
	Global mMojoIndexBuffer:Int
	Global mEllipseBuffer:Int
	Global mLineBuffer:Int
	Global mRectBuffer:Int
	Global mFramebufferHeight:Int
	Global mTexDataBuffer:DataBuffer = New DataBuffer(64, True)
	Global mShaderError:String		'Last error occured when compiling or linking a shader
	Global mTempArray:Int[1]			'Array used when requesting parameters to OpenGL
End
