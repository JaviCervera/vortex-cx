Strict

Private
Import brl.datastream
Import brl.filepath
Import brl.filestream
Import brl.filesystem
Import brl.process
Import mojo.app
Import vortex

Public

Const MESH_SKINNED		: Int = 0
Const MESH_VERTEXANIM	: Int = 1

Function LoadMesh:Mesh(filename:String, animMode:Int)
	'If not a native mesh, convert first
	If ExtractExt(filename).ToLower() <> "dat"
#If HOST="winnt"
		Local ext:String = ".exe"
#Else
		Local ext:String = ".bin"
#End
		Local path:String = CurrentDir() + "/data/meshtool" + ext
		If FileType(path) <> FILETYPE_FILE
			path = CurrentDir() + "/meshtool.data/meshtool" + ext
		Else
			'Make sure that file is given execution permissions on Linux
			Process.Execute("chmod +x ~q" + path + "~q")
		End
		
		'Get animation mode
		Local mode:String = ""
		If animMode = MESH_VERTEXANIM Then mode = "-vertexanim"
		
		Local command:String = "~q" + path + "~q " + mode + " ~q" + filename + "~q"
		Process.Execute(command)
		filename = StripExt(filename) + ".msh.dat"
	End
	
	'Load native mesh
	Local baseName:String = StripExt(StripExt(filename))
	'Local mesh:Mesh = Mesh.Load(filename, baseName + ".skl.dat", Texture.FilterTrilinear, False)
	Local mesh:Mesh = Mesh.Load(filename, Texture.FilterTrilinear, False)
	If mesh
		'If Not mesh.LoadAnimation(baseName + ".anm.dat") Then mesh.LoadVertexAnimation(baseName + ".vta.dat")
		mesh.LoadVertexAnimation(baseName + ".vta.dat")
	End
	Return mesh
End

Function MaterialSize:Int(mat:Material)
	'Fixed header
	Local size:Int = 4	'Base Color
	size += 4						'Specular color (unused yet)
	size += 4						'Emissive color (unused yet)
	size += 4						'Ambient color (only alpha is used for shininess)
	size += 1						'BlendMode
	size += 1						'Flags
	'size += 4						'Shininess
	size += 4						'Specular power
	size += 4						'Cube opacity
	size += 4						'RefractCoef
	size += 1						'Used textures
	
	'Texture names
	If mat.ColorTexture Then size += 4 + StripDir(mat.ColorTexture.Filename).Length
	If mat.NormalTexture Then size += 4 + StripDir(mat.NormalTexture.Filename).Length
	If mat.ShininessTexture Then size += 4 + StripDir(mat.ShininessTexture.Filename).Length
	If mat.LightTexture Then size += 4 + StripDir(mat.LightTexture.Filename).Length
	If mat.CubeTexture Then size += 4 + StripDir(mat.CubeTexture.Filename).Length
	
	Return size
End

Function NormalsSize:Int(surf:Surface)
	For Local v:Int = 0 Until surf.NumVertices
		If surf.VertexNX(v) <> 0 Or surf.VertexNY(v) <> 0 Or surf.VertexNZ(v) <> 0
			Return surf.NumVertices * 3 * 4
		End
	Next
	Return 0
End

Function TangentsSize:Int(surf:Surface)
	For Local v:Int = 0 Until surf.NumVertices
		If surf.VertexTX(v) <> 0 Or surf.VertexTY(v) <> 0 Or surf.VertexTZ(v) <> 0
			Return surf.NumVertices * 3 * 4
		End
	Next
	Return 0
End

Function ColorsSize:Int(surf:Surface)
	For Local v:Int = 0 Until surf.NumVertices
		If surf.VertexColor(v) <> Color.White
			Return surf.NumVertices * 4
		End
	Next
	Return 0
End

Function Tex0Size:Int(surf:Surface)
	For Local v:Int = 0 Until surf.NumVertices
		If surf.VertexU(v) <> 0 Or surf.VertexV(v) <> 0
			Return surf.NumVertices * 2 * 4
		End
	Next
	Return 0
End

Function Tex1Size:Int(surf:Surface)
	For Local v:Int = 0 Until surf.NumVertices
		If surf.VertexU(v, 1) <> surf.VertexU(v) Or surf.VertexV(v, 1) <> surf.VertexV(v)
			Return surf.NumVertices * 2 * 4
		End
	Next
	Return 0
End

Function WeightsSize:Int(surf:Surface)
	For Local v:Int = 0 Until surf.NumVertices
		If surf.VertexBoneIndex(v, 0) <> -1 Or surf.VertexBoneIndex(v, 1) <> -1 Or surf.VertexBoneIndex(v, 2) <> -1 Or surf.VertexBoneIndex(v, 3) <> -1
			Return (surf.NumVertices * 4 * 2) + (surf.NumVertices * 4 * 4)
		End
	Next
	Return 0
End

Function SurfaceSize:Int(surf:Surface)
	'Header
	Local size:Int = 4								'NumIndices
	size += 2										'NumVertices
	size += 1										'Vertex flags
	
	'Indices and vertices
	size += surf.NumTriangles * 6					'Indices
	size += surf.NumVertices * 3 * 4				'Vertex positions
	size += NormalsSize(surf)						'Vertex normals
	size += TangentsSize(surf)						'Vertex tangents
	size += ColorsSize(surf)						'Vertex colors
	size += Tex0Size(surf)							'Vertex tex coords 0
	size += Tex1Size(surf)							'Vertex tex coords 1
	size += WeightsSize(surf)	'Vertex bones
	
	Return size
End

Function MeshSize:Int(mesh:Mesh)
	'Fixed header
	Local size:Int = 4	'Id & version
	size += 2			'Number of surfaces
	
	'Surfaces
	For Local i:Int = 0 Until mesh.NumSurfaces
		size += MaterialSize(mesh.Material(i))
		size += SurfaceSize(mesh.Surface(i))
	Next
	
	Return size 
End

Function WriteMaterialData:Void(stream:DataStream, mat:Material)
	'Base Color
	stream.WriteInt(mat.Color)
	
	'Specular Color
	'stream.WriteInt(Color.White)
	stream.WriteInt(Color.ChangeAlpha(Color.White, Min(Int(mat.Shininess * 255), 255)))
	
	'Emissive Color
	stream.WriteInt(Color.Black)
	
	'Ambient color
	stream.WriteInt(Color.White)
	
	'Blend mode
	stream.WriteByte(mat.BlendMode)
	
	'Flags
	Local flags:Int = 0
	If Not mat.Culling Then flags |= 1
	If Not mat.DepthWrite Then flags |= 2
	If Not mat.Lighting Then flags |= 4
	If Not mat.CastShadows Then flags |= 8
	If Not mat.ReceiveShadows Then flags |= 16
	If Not mat.Fog Then flags |= 32
	stream.WriteByte(flags)
	
	'Shininess
	'stream.WriteFloat(mat.Shininess)
	
	'Specular Power
	stream.WriteFloat(mat.SpecularPower)
	
	'Cube opacity
	stream.WriteFloat(mat.CubeOpacity)
	
	'Refraction coef
	stream.WriteFloat(mat.RefractionCoef)
	
	'Used textures
	Local usedTexs:Int = 0	'1=Color,2=Normal,4=Specular/Shininess,8=Emissive,16=Ambient,32=Lightmap,64=Cube
	If mat.ColorTexture Then usedTexs |= 1
	If mat.NormalTexture Then usedTexs |= 2
	If mat.ShininessTexture Then usedTexs |= 4
	'If mat.SpecularTexture Then usedTexs |= 4
	'If mat.EmissiveTexture Then usedTexs |= 8
	'If mat.AmbientTexture Then usedTexs |= 16
	If mat.LightTexture Then usedTexs |= 32
	If mat.CubeTexture Then usedTexs |= 64
	stream.WriteByte(usedTexs)
	
	'Texture names
	Local filename:String = ""
	If mat.ColorTexture Then filename = StripDir(mat.ColorTexture.Filename); stream.WriteInt(filename.Length); stream.WriteString(filename)
	If mat.NormalTexture Then filename = StripDir(mat.NormalTexture.Filename); stream.WriteInt(filename.Length); stream.WriteString(filename)
	If mat.ShininessTexture Then filename = StripDir(mat.ShininessTexture.Filename); stream.WriteInt(filename.Length); stream.WriteString(filename)
	If mat.LightTexture Then filename = StripDir(mat.LightTexture.Filename); stream.WriteInt(filename.Length); stream.WriteString(filename)
	If mat.CubeTexture Then filename = StripDir(mat.CubeTexture.Filename); stream.WriteInt(filename.Length); stream.WriteString(filename)
End

Function WriteSurfaceData:Void(stream:DataStream, surf:Surface)
	'Number of indices and vertices
	stream.WriteInt(surf.NumTriangles * 3)
	stream.WriteShort(surf.NumVertices)
	
	'Vertex flags
	Local vertexFlags:Int = 0
	If NormalsSize(surf) > 0 Then vertexFlags |= 1
	If TangentsSize(surf) > 0 Then vertexFlags |= 2
	If ColorsSize(surf) > 0	Then vertexFlags |= 4
	If Tex0Size(surf) > 0 Then vertexFlags |= 8
	If Tex1Size(surf) > 0 Then vertexFlags |= 16
	If WeightsSize(surf) > 0 Then vertexFlags |= 32
	stream.WriteByte(vertexFlags)
	
	'Indices
	For Local t:Int = 0 Until surf.NumTriangles
		stream.WriteShort(surf.TriangleV0(t))
		stream.WriteShort(surf.TriangleV1(t))
		stream.WriteShort(surf.TriangleV2(t))
	Next
	
	'Vertices
	For Local v:Int = 0 Until surf.NumVertices
		stream.WriteFloat(surf.VertexX(v))
		stream.WriteFloat(surf.VertexY(v))
		stream.WriteFloat(surf.VertexZ(v))
		
		If vertexFlags & 1 = 1
			stream.WriteFloat(surf.VertexNX(v))
			stream.WriteFloat(surf.VertexNY(v))
			stream.WriteFloat(surf.VertexNZ(v))
		End
		
		If vertexFlags & 2 = 2
			stream.WriteFloat(surf.VertexTX(v))
			stream.WriteFloat(surf.VertexTY(v))
			stream.WriteFloat(surf.VertexTZ(v))
		End
		
		If vertexFlags & 4 = 4
			stream.WriteInt(surf.VertexColor(v))
		End
		
		If vertexFlags & 8 = 8
			stream.WriteFloat(surf.VertexU(v, 0))
			stream.WriteFloat(surf.VertexV(v, 0))
		End
		
		If vertexFlags & 16 = 16
			stream.WriteFloat(surf.VertexU(v, 1))
			stream.WriteFloat(surf.VertexV(v, 1))
		End
		
		If vertexFlags & 32 = 32
			stream.WriteShort(surf.VertexBoneIndex(v, 0))
			stream.WriteShort(surf.VertexBoneIndex(v, 1))
			stream.WriteShort(surf.VertexBoneIndex(v, 2))
			stream.WriteShort(surf.VertexBoneIndex(v, 3))
			stream.WriteFloat(surf.VertexBoneWeight(v, 0))
			stream.WriteFloat(surf.VertexBoneWeight(v, 1))
			stream.WriteFloat(surf.VertexBoneWeight(v, 2))
			stream.WriteFloat(surf.VertexBoneWeight(v, 3))
		End
	Next
End

Function CreateMeshData:DataBuffer(mesh:Mesh)
	Local stream:DataStream = New DataStream(New DataBuffer(MeshSize(mesh)))
	
	'Id & version
	stream.WriteByte("M"[0])
	stream.WriteByte("E"[0])
	stream.WriteByte("0"[0])
	stream.WriteByte("1"[0])
	
	'Number of surfaces
	stream.WriteShort(mesh.NumSurfaces)
	
	'Surfaces
	For Local i:Int = 0 Until mesh.NumSurfaces
		WriteMaterialData(stream, mesh.Material(i))
		WriteSurfaceData(stream, mesh.Surface(i))
	Next
	
	Return stream.Data
End

#Rem
Function BoneSize:Int(bone:Bone)
	Local size:Int = 4 + bone.Name.Length	'Name
	size += 4											'Parent index
	size += 16 * 4								'Transform matrix
	size += 16 * 4								'Inv pose matrix
	size += 2											'Num surfaces
	size += bone.NumSurfaces * 2	'Surface indices
	Return size
End

Function SkeletonSize:Int(mesh:Mesh)
	'Fixed header
	Local size:Int = 4	'Id & version
	size += 2			'Number of bones
	
	'Bones
	For Local i:Int = 0 Until mesh.NumBones
		size += BoneSize(mesh.Bone(i))
	Next
	
	Return size 
End

Function WriteBoneData:Void(stream:DataStream, bone:Bone)
	'Name
	stream.WriteInt(bone.Name.Length)
	stream.WriteString(bone.Name)
	
	'Parent index
	stream.WriteInt(bone.ParentIndex)
	
	'Transform matrix
	For Local i:Int = 0 Until 16
		stream.WriteFloat(bone.TransformMatrix[i])
	Next
	
	'Inv pose matrix
	For Local i:Int = 0 Until 16
		stream.WriteFloat(bone.InversePoseMatrix[i])
	Next
	
	'Surfaces
	stream.WriteShort(bone.NumSurfaces)
	For Local i:Int = 0 Until bone.NumSurfaces
		stream.WriteShort(bone.SurfaceIndex(i))
	Next
End

Function CreateSkeletonData:DataBuffer(mesh:Mesh)
	Local stream:DataStream = New DataStream(New DataBuffer(SkeletonSize(mesh)))
	
	'Id & version
	stream.WriteByte("S"[0])
	stream.WriteByte("K"[0])
	stream.WriteByte("0"[0])
	stream.WriteByte("1"[0])
	
	'Number of bones
	stream.WriteShort(mesh.NumBones)
	
	'Bones
	For Local b:Int = 0 Until mesh.NumBones
		WriteBoneData(stream, mesh.Bone(b))
	Next
	
	Return stream.Data
End

Function BoneAnimationSize:Int(bone:Bone)
	'Position keys
	Local size:Int = 2						'Num keys
	size += bone.NumPositionKeys * 2		'Indices
	size += bone.NumPositionKeys * 3 * 4	'Positions
	
	'Rotation keys
	size += 2								'Num keys
	size += bone.NumRotationKeys * 2		'Indices
	size += bone.NumRotationKeys * 4 * 4	'Rotations
	
	'Scale keys
	size += 2								'Num keys
	size += bone.NumScaleKeys * 2			'Indices
	size += bone.NumScaleKeys * 3 * 4		'Scales
	
	Return size
End

Function AnimationSize:Int(mesh:Mesh)
	'Fixed header
	Local size:Int = 4	'Id & version
	size += 2			'Number of frames
	size += 4			'Animation speed
	size += 2			'Number of bones
	
	'Animations
	For Local i:Int = 0 Until mesh.NumBones
		size += BoneAnimationSize(mesh.Bone(i))
	Next
	
	Return size
End

Function WriteAnimationData:Void(stream:DataStream, bone:Bone)
	'Position keys
	stream.WriteShort(bone.NumPositionKeys)
	For Local i:Int = 0 Until bone.NumPositionKeys
		stream.WriteShort(bone.PositionKeyFrame(i))
		stream.WriteFloat(bone.PositionKeyX(i))
		stream.WriteFloat(bone.PositionKeyY(i))
		stream.WriteFloat(bone.PositionKeyZ(i))
	Next
	
	'Rotation keys
	stream.WriteShort(bone.NumRotationKeys)
	For Local i:Int = 0 Until bone.NumRotationKeys
		stream.WriteShort(bone.RotationKeyFrame(i))
		stream.WriteFloat(bone.RotationKeyW(i))
		stream.WriteFloat(bone.RotationKeyX(i))
		stream.WriteFloat(bone.RotationKeyY(i))
		stream.WriteFloat(bone.RotationKeyZ(i))
	Next
	
	'Scale keys
	stream.WriteShort(bone.NumScaleKeys)
	For Local i:Int = 0 Until bone.NumScaleKeys
		stream.WriteShort(bone.ScaleKeyFrame(i))
		stream.WriteFloat(bone.ScaleKeyX(i))
		stream.WriteFloat(bone.ScaleKeyY(i))
		stream.WriteFloat(bone.ScaleKeyZ(i))
	Next
End

Function CreateAnimationData:DataBuffer(mesh:Mesh)
	Local stream:DataStream = New DataStream(New DataBuffer(AnimationSize(mesh)))
	
	'Id & version
	stream.WriteByte("A"[0])
	stream.WriteByte("N"[0])
	stream.WriteByte("0"[0])
	stream.WriteByte("1"[0])
	
	'Number of frames
	stream.WriteShort(mesh._NumFrames)
	
	'Animation speed
	stream.WriteFloat(mesh._AnimSpeed)
	
	'Number of bones
	stream.WriteShort(mesh.NumBones)
	
	'Animation data
	For Local b:Int = 0 Until mesh.NumBones
		WriteAnimationData(stream, mesh.Bone(b))
	Next
	
	Return stream.Data
End
#End

Function SaveMesh:Void(mesh:Mesh, filename:String)
	Local meshData:DataBuffer = CreateMeshData(mesh)
	Local fileStream:FileStream = New FileStream(filename, "w")
	fileStream.WriteAll(meshData, 0, meshData.Length)
	fileStream.Close()
End

#Rem
Function SaveSkeleton:Void(mesh:Mesh, filename:String)
	Local skeletonData:DataBuffer = CreateSkeletonData(mesh)
	Local fileStream:FileStream = New FileStream(filename, "w")
	fileStream.WriteAll(skeletonData, 0, skeletonData.Length)
	fileStream.Close()
End

Function SaveAnimation:Void(mesh:Mesh, filename:String)
	Local animationData:DataBuffer = CreateAnimationData(mesh)
	Local fileStream:FileStream = New FileStream(filename, "w")
	fileStream.WriteAll(animationData, 0, animationData.Length)
	fileStream.Close()
End
#End
